// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt.proto

#ifndef PROTOBUF_rt_2eproto__INCLUDED
#define PROTOBUF_rt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace protobuf_bird_bench {
class bgp_aggr;
class bgp_aggrDefaultTypeInternal;
extern bgp_aggrDefaultTypeInternal _bgp_aggr_default_instance_;
class bgp_as_path;
class bgp_as_pathDefaultTypeInternal;
extern bgp_as_pathDefaultTypeInternal _bgp_as_path_default_instance_;
class bgp_community;
class bgp_communityDefaultTypeInternal;
extern bgp_communityDefaultTypeInternal _bgp_community_default_instance_;
class cflag;
class cflagDefaultTypeInternal;
extern cflagDefaultTypeInternal _cflag_default_instance_;
class rt;
class rtDefaultTypeInternal;
extern rtDefaultTypeInternal _rt_default_instance_;
class rta;
class rtaDefaultTypeInternal;
extern rtaDefaultTypeInternal _rta_default_instance_;
class rta_other;
class rta_otherDefaultTypeInternal;
extern rta_otherDefaultTypeInternal _rta_other_default_instance_;
class rte;
class rteDefaultTypeInternal;
extern rteDefaultTypeInternal _rte_default_instance_;
class time;
class timeDefaultTypeInternal;
extern timeDefaultTypeInternal _time_default_instance_;
}  // namespace protobuf_bird_bench

namespace protobuf_bird_bench {

namespace protobuf_rt_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_rt_2eproto

enum rte_src {
  INTERNAL = 0,
  EXTERNAL = 1,
  U = 2,
  WHO_KNOWS = 3
};
bool rte_src_IsValid(int value);
const rte_src rte_src_MIN = INTERNAL;
const rte_src rte_src_MAX = WHO_KNOWS;
const int rte_src_ARRAYSIZE = rte_src_MAX + 1;

const ::google::protobuf::EnumDescriptor* rte_src_descriptor();
inline const ::std::string& rte_src_Name(rte_src value) {
  return ::google::protobuf::internal::NameOfEnum(
    rte_src_descriptor(), value);
}
inline bool rte_src_Parse(
    const ::std::string& name, rte_src* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rte_src>(
    rte_src_descriptor(), name, value);
}
enum rta_type {
  BGP_AS_PATH = 1,
  BGP_ORIGIN = 2,
  BGP_NEXT_HOP = 3,
  BGP_LOCAL_PREF = 4,
  BGP_COMMUNITY = 5,
  BGP_AGGREGATOR = 6,
  OTHER = 7
};
bool rta_type_IsValid(int value);
const rta_type rta_type_MIN = BGP_AS_PATH;
const rta_type rta_type_MAX = OTHER;
const int rta_type_ARRAYSIZE = rta_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* rta_type_descriptor();
inline const ::std::string& rta_type_Name(rta_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rta_type_descriptor(), value);
}
inline bool rta_type_Parse(
    const ::std::string& name, rta_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rta_type>(
    rta_type_descriptor(), name, value);
}
enum bgp_origin {
  IGP = 1,
  EGP = 2,
  INCOMPLETE = 3
};
bool bgp_origin_IsValid(int value);
const bgp_origin bgp_origin_MIN = IGP;
const bgp_origin bgp_origin_MAX = INCOMPLETE;
const int bgp_origin_ARRAYSIZE = bgp_origin_MAX + 1;

const ::google::protobuf::EnumDescriptor* bgp_origin_descriptor();
inline const ::std::string& bgp_origin_Name(bgp_origin value) {
  return ::google::protobuf::internal::NameOfEnum(
    bgp_origin_descriptor(), value);
}
inline bool bgp_origin_Parse(
    const ::std::string& name, bgp_origin* value) {
  return ::google::protobuf::internal::ParseNamedEnum<bgp_origin>(
    bgp_origin_descriptor(), name, value);
}
// ===================================================================

class cflag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_bird_bench.cflag) */ {
 public:
  cflag();
  virtual ~cflag();

  cflag(const cflag& from);

  inline cflag& operator=(const cflag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cflag& default_instance();

  static inline const cflag* internal_default_instance() {
    return reinterpret_cast<const cflag*>(
               &_cflag_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(cflag* other);

  // implements Message ----------------------------------------------

  inline cflag* New() const PROTOBUF_FINAL { return New(NULL); }

  cflag* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const cflag& from);
  void MergeFrom(const cflag& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(cflag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 as_no = 1;
  bool has_as_no() const;
  void clear_as_no();
  static const int kAsNoFieldNumber = 1;
  ::google::protobuf::uint64 as_no() const;
  void set_as_no(::google::protobuf::uint64 value);

  // required uint64 flag = 2;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 2;
  ::google::protobuf::uint64 flag() const;
  void set_flag(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protobuf_bird_bench.cflag)
 private:
  void set_has_as_no();
  void clear_has_as_no();
  void set_has_flag();
  void clear_has_flag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 as_no_;
  ::google::protobuf::uint64 flag_;
  friend struct protobuf_rt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bgp_community : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_bird_bench.bgp_community) */ {
 public:
  bgp_community();
  virtual ~bgp_community();

  bgp_community(const bgp_community& from);

  inline bgp_community& operator=(const bgp_community& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bgp_community& default_instance();

  static inline const bgp_community* internal_default_instance() {
    return reinterpret_cast<const bgp_community*>(
               &_bgp_community_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(bgp_community* other);

  // implements Message ----------------------------------------------

  inline bgp_community* New() const PROTOBUF_FINAL { return New(NULL); }

  bgp_community* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const bgp_community& from);
  void MergeFrom(const bgp_community& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(bgp_community* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf_bird_bench.cflag cflags = 1;
  int cflags_size() const;
  void clear_cflags();
  static const int kCflagsFieldNumber = 1;
  const ::protobuf_bird_bench::cflag& cflags(int index) const;
  ::protobuf_bird_bench::cflag* mutable_cflags(int index);
  ::protobuf_bird_bench::cflag* add_cflags();
  ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::cflag >*
      mutable_cflags();
  const ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::cflag >&
      cflags() const;

  // @@protoc_insertion_point(class_scope:protobuf_bird_bench.bgp_community)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::cflag > cflags_;
  friend struct protobuf_rt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bgp_aggr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_bird_bench.bgp_aggr) */ {
 public:
  bgp_aggr();
  virtual ~bgp_aggr();

  bgp_aggr(const bgp_aggr& from);

  inline bgp_aggr& operator=(const bgp_aggr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bgp_aggr& default_instance();

  static inline const bgp_aggr* internal_default_instance() {
    return reinterpret_cast<const bgp_aggr*>(
               &_bgp_aggr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(bgp_aggr* other);

  // implements Message ----------------------------------------------

  inline bgp_aggr* New() const PROTOBUF_FINAL { return New(NULL); }

  bgp_aggr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const bgp_aggr& from);
  void MergeFrom(const bgp_aggr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(bgp_aggr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 as_no = 1;
  bool has_as_no() const;
  void clear_as_no();
  static const int kAsNoFieldNumber = 1;
  ::google::protobuf::uint64 as_no() const;
  void set_as_no(::google::protobuf::uint64 value);

  // required uint32 ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protobuf_bird_bench.bgp_aggr)
 private:
  void set_has_as_no();
  void clear_has_as_no();
  void set_has_ip();
  void clear_has_ip();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 as_no_;
  ::google::protobuf::uint32 ip_;
  friend struct protobuf_rt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bgp_as_path : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_bird_bench.bgp_as_path) */ {
 public:
  bgp_as_path();
  virtual ~bgp_as_path();

  bgp_as_path(const bgp_as_path& from);

  inline bgp_as_path& operator=(const bgp_as_path& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bgp_as_path& default_instance();

  static inline const bgp_as_path* internal_default_instance() {
    return reinterpret_cast<const bgp_as_path*>(
               &_bgp_as_path_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(bgp_as_path* other);

  // implements Message ----------------------------------------------

  inline bgp_as_path* New() const PROTOBUF_FINAL { return New(NULL); }

  bgp_as_path* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const bgp_as_path& from);
  void MergeFrom(const bgp_as_path& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(bgp_as_path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 as_no = 1;
  int as_no_size() const;
  void clear_as_no();
  static const int kAsNoFieldNumber = 1;
  ::google::protobuf::uint64 as_no(int index) const;
  void set_as_no(int index, ::google::protobuf::uint64 value);
  void add_as_no(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      as_no() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_as_no();

  // @@protoc_insertion_point(class_scope:protobuf_bird_bench.bgp_as_path)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > as_no_;
  friend struct protobuf_rt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rta_other : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_bird_bench.rta_other) */ {
 public:
  rta_other();
  virtual ~rta_other();

  rta_other(const rta_other& from);

  inline rta_other& operator=(const rta_other& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rta_other& default_instance();

  static inline const rta_other* internal_default_instance() {
    return reinterpret_cast<const rta_other*>(
               &_rta_other_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(rta_other* other);

  // implements Message ----------------------------------------------

  inline rta_other* New() const PROTOBUF_FINAL { return New(NULL); }

  rta_other* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rta_other& from);
  void MergeFrom(const rta_other& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rta_other* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:protobuf_bird_bench.rta_other)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_rt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_bird_bench.time) */ {
 public:
  time();
  virtual ~time();

  time(const time& from);

  inline time& operator=(const time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const time& default_instance();

  static inline const time* internal_default_instance() {
    return reinterpret_cast<const time*>(
               &_time_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(time* other);

  // implements Message ----------------------------------------------

  inline time* New() const PROTOBUF_FINAL { return New(NULL); }

  time* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const time& from);
  void MergeFrom(const time& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hour = 1;
  bool has_hour() const;
  void clear_hour();
  static const int kHourFieldNumber = 1;
  ::google::protobuf::int32 hour() const;
  void set_hour(::google::protobuf::int32 value);

  // required int32 min = 2;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 2;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // required int32 sec = 3;
  bool has_sec() const;
  void clear_sec();
  static const int kSecFieldNumber = 3;
  ::google::protobuf::int32 sec() const;
  void set_sec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_bird_bench.time)
 private:
  void set_has_hour();
  void clear_has_hour();
  void set_has_min();
  void clear_has_min();
  void set_has_sec();
  void clear_has_sec();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 sec_;
  friend struct protobuf_rt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_bird_bench.rta) */ {
 public:
  rta();
  virtual ~rta();

  rta(const rta& from);

  inline rta& operator=(const rta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rta& default_instance();

  static inline const rta* internal_default_instance() {
    return reinterpret_cast<const rta*>(
               &_rta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(rta* other);

  // implements Message ----------------------------------------------

  inline rta* New() const PROTOBUF_FINAL { return New(NULL); }

  rta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rta& from);
  void MergeFrom(const rta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protobuf_bird_bench.bgp_as_path as_path = 2;
  bool has_as_path() const;
  void clear_as_path();
  static const int kAsPathFieldNumber = 2;
  const ::protobuf_bird_bench::bgp_as_path& as_path() const;
  ::protobuf_bird_bench::bgp_as_path* mutable_as_path();
  ::protobuf_bird_bench::bgp_as_path* release_as_path();
  void set_allocated_as_path(::protobuf_bird_bench::bgp_as_path* as_path);

  // optional .protobuf_bird_bench.bgp_community community = 6;
  bool has_community() const;
  void clear_community();
  static const int kCommunityFieldNumber = 6;
  const ::protobuf_bird_bench::bgp_community& community() const;
  ::protobuf_bird_bench::bgp_community* mutable_community();
  ::protobuf_bird_bench::bgp_community* release_community();
  void set_allocated_community(::protobuf_bird_bench::bgp_community* community);

  // optional .protobuf_bird_bench.bgp_aggr aggregator = 7;
  bool has_aggregator() const;
  void clear_aggregator();
  static const int kAggregatorFieldNumber = 7;
  const ::protobuf_bird_bench::bgp_aggr& aggregator() const;
  ::protobuf_bird_bench::bgp_aggr* mutable_aggregator();
  ::protobuf_bird_bench::bgp_aggr* release_aggregator();
  void set_allocated_aggregator(::protobuf_bird_bench::bgp_aggr* aggregator);

  // optional .protobuf_bird_bench.rta_other other = 8;
  bool has_other() const;
  void clear_other();
  static const int kOtherFieldNumber = 8;
  const ::protobuf_bird_bench::rta_other& other() const;
  ::protobuf_bird_bench::rta_other* mutable_other();
  ::protobuf_bird_bench::rta_other* release_other();
  void set_allocated_other(::protobuf_bird_bench::rta_other* other);

  // optional uint32 next_hop = 4;
  bool has_next_hop() const;
  void clear_next_hop();
  static const int kNextHopFieldNumber = 4;
  ::google::protobuf::uint32 next_hop() const;
  void set_next_hop(::google::protobuf::uint32 value);

  // optional int32 local_pref = 5;
  bool has_local_pref() const;
  void clear_local_pref();
  static const int kLocalPrefFieldNumber = 5;
  ::google::protobuf::int32 local_pref() const;
  void set_local_pref(::google::protobuf::int32 value);

  // required bool tflag = 9;
  bool has_tflag() const;
  void clear_tflag();
  static const int kTflagFieldNumber = 9;
  bool tflag() const;
  void set_tflag(bool value);

  // required .protobuf_bird_bench.rta_type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::protobuf_bird_bench::rta_type type() const;
  void set_type(::protobuf_bird_bench::rta_type value);

  // optional .protobuf_bird_bench.bgp_origin origin = 3;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 3;
  ::protobuf_bird_bench::bgp_origin origin() const;
  void set_origin(::protobuf_bird_bench::bgp_origin value);

  // @@protoc_insertion_point(class_scope:protobuf_bird_bench.rta)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_tflag();
  void clear_has_tflag();
  void set_has_as_path();
  void clear_has_as_path();
  void set_has_origin();
  void clear_has_origin();
  void set_has_next_hop();
  void clear_has_next_hop();
  void set_has_local_pref();
  void clear_has_local_pref();
  void set_has_community();
  void clear_has_community();
  void set_has_aggregator();
  void clear_has_aggregator();
  void set_has_other();
  void clear_has_other();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::protobuf_bird_bench::bgp_as_path* as_path_;
  ::protobuf_bird_bench::bgp_community* community_;
  ::protobuf_bird_bench::bgp_aggr* aggregator_;
  ::protobuf_bird_bench::rta_other* other_;
  ::google::protobuf::uint32 next_hop_;
  ::google::protobuf::int32 local_pref_;
  bool tflag_;
  int type_;
  int origin_;
  friend struct protobuf_rt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rte : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_bird_bench.rte) */ {
 public:
  rte();
  virtual ~rte();

  rte(const rte& from);

  inline rte& operator=(const rte& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rte& default_instance();

  static inline const rte* internal_default_instance() {
    return reinterpret_cast<const rte*>(
               &_rte_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(rte* other);

  // implements Message ----------------------------------------------

  inline rte* New() const PROTOBUF_FINAL { return New(NULL); }

  rte* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rte& from);
  void MergeFrom(const rte& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rte* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf_bird_bench.rta attrs = 6;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 6;
  const ::protobuf_bird_bench::rta& attrs(int index) const;
  ::protobuf_bird_bench::rta* mutable_attrs(int index);
  ::protobuf_bird_bench::rta* add_attrs();
  ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rta >*
      mutable_attrs();
  const ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rta >&
      attrs() const;

  // optional string ifname = 7;
  bool has_ifname() const;
  void clear_ifname();
  static const int kIfnameFieldNumber = 7;
  const ::std::string& ifname() const;
  void set_ifname(const ::std::string& value);
  #if LANG_CXX11
  void set_ifname(::std::string&& value);
  #endif
  void set_ifname(const char* value);
  void set_ifname(const char* value, size_t size);
  ::std::string* mutable_ifname();
  ::std::string* release_ifname();
  void set_allocated_ifname(::std::string* ifname);

  // required .protobuf_bird_bench.time uplink = 8;
  bool has_uplink() const;
  void clear_uplink();
  static const int kUplinkFieldNumber = 8;
  const ::protobuf_bird_bench::time& uplink() const;
  ::protobuf_bird_bench::time* mutable_uplink();
  ::protobuf_bird_bench::time* release_uplink();
  void set_allocated_uplink(::protobuf_bird_bench::time* uplink);

  // required uint32 netaddr = 1;
  bool has_netaddr() const;
  void clear_netaddr();
  static const int kNetaddrFieldNumber = 1;
  ::google::protobuf::uint32 netaddr() const;
  void set_netaddr(::google::protobuf::uint32 value);

  // required uint32 prefix = 2;
  bool has_prefix() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  ::google::protobuf::uint32 prefix() const;
  void set_prefix(::google::protobuf::uint32 value);

  // optional uint64 as_no = 4;
  bool has_as_no() const;
  void clear_as_no();
  static const int kAsNoFieldNumber = 4;
  ::google::protobuf::uint64 as_no() const;
  void set_as_no(::google::protobuf::uint64 value);

  // required uint32 gwaddr = 3;
  bool has_gwaddr() const;
  void clear_gwaddr();
  static const int kGwaddrFieldNumber = 3;
  ::google::protobuf::uint32 gwaddr() const;
  void set_gwaddr(::google::protobuf::uint32 value);

  // optional .protobuf_bird_bench.rte_src src = 5;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 5;
  ::protobuf_bird_bench::rte_src src() const;
  void set_src(::protobuf_bird_bench::rte_src value);

  // optional uint32 uplink_from = 9;
  bool has_uplink_from() const;
  void clear_uplink_from();
  static const int kUplinkFromFieldNumber = 9;
  ::google::protobuf::uint32 uplink_from() const;
  void set_uplink_from(::google::protobuf::uint32 value);

  // required uint32 type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protobuf_bird_bench.rte)
 private:
  void set_has_netaddr();
  void clear_has_netaddr();
  void set_has_prefix();
  void clear_has_prefix();
  void set_has_gwaddr();
  void clear_has_gwaddr();
  void set_has_as_no();
  void clear_has_as_no();
  void set_has_ifname();
  void clear_has_ifname();
  void set_has_uplink();
  void clear_has_uplink();
  void set_has_uplink_from();
  void clear_has_uplink_from();
  void set_has_type();
  void clear_has_type();
  void set_has_src();
  void clear_has_src();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rta > attrs_;
  ::google::protobuf::internal::ArenaStringPtr ifname_;
  ::protobuf_bird_bench::time* uplink_;
  ::google::protobuf::uint32 netaddr_;
  ::google::protobuf::uint32 prefix_;
  ::google::protobuf::uint64 as_no_;
  ::google::protobuf::uint32 gwaddr_;
  int src_;
  ::google::protobuf::uint32 uplink_from_;
  ::google::protobuf::uint32 type_;
  friend struct protobuf_rt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_bird_bench.rt) */ {
 public:
  rt();
  virtual ~rt();

  rt(const rt& from);

  inline rt& operator=(const rt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rt& default_instance();

  static inline const rt* internal_default_instance() {
    return reinterpret_cast<const rt*>(
               &_rt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(rt* other);

  // implements Message ----------------------------------------------

  inline rt* New() const PROTOBUF_FINAL { return New(NULL); }

  rt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rt& from);
  void MergeFrom(const rt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf_bird_bench.rte entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  const ::protobuf_bird_bench::rte& entries(int index) const;
  ::protobuf_bird_bench::rte* mutable_entries(int index);
  ::protobuf_bird_bench::rte* add_entries();
  ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rte >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rte >&
      entries() const;

  // required string version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:protobuf_bird_bench.rt)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rte > entries_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  friend struct protobuf_rt_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// cflag

// required uint64 as_no = 1;
inline bool cflag::has_as_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cflag::set_has_as_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cflag::clear_has_as_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cflag::clear_as_no() {
  as_no_ = GOOGLE_ULONGLONG(0);
  clear_has_as_no();
}
inline ::google::protobuf::uint64 cflag::as_no() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.cflag.as_no)
  return as_no_;
}
inline void cflag::set_as_no(::google::protobuf::uint64 value) {
  set_has_as_no();
  as_no_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.cflag.as_no)
}

// required uint64 flag = 2;
inline bool cflag::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cflag::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cflag::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cflag::clear_flag() {
  flag_ = GOOGLE_ULONGLONG(0);
  clear_has_flag();
}
inline ::google::protobuf::uint64 cflag::flag() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.cflag.flag)
  return flag_;
}
inline void cflag::set_flag(::google::protobuf::uint64 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.cflag.flag)
}

// -------------------------------------------------------------------

// bgp_community

// repeated .protobuf_bird_bench.cflag cflags = 1;
inline int bgp_community::cflags_size() const {
  return cflags_.size();
}
inline void bgp_community::clear_cflags() {
  cflags_.Clear();
}
inline const ::protobuf_bird_bench::cflag& bgp_community::cflags(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.bgp_community.cflags)
  return cflags_.Get(index);
}
inline ::protobuf_bird_bench::cflag* bgp_community::mutable_cflags(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.bgp_community.cflags)
  return cflags_.Mutable(index);
}
inline ::protobuf_bird_bench::cflag* bgp_community::add_cflags() {
  // @@protoc_insertion_point(field_add:protobuf_bird_bench.bgp_community.cflags)
  return cflags_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::cflag >*
bgp_community::mutable_cflags() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_bird_bench.bgp_community.cflags)
  return &cflags_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::cflag >&
bgp_community::cflags() const {
  // @@protoc_insertion_point(field_list:protobuf_bird_bench.bgp_community.cflags)
  return cflags_;
}

// -------------------------------------------------------------------

// bgp_aggr

// required uint64 as_no = 1;
inline bool bgp_aggr::has_as_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bgp_aggr::set_has_as_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bgp_aggr::clear_has_as_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bgp_aggr::clear_as_no() {
  as_no_ = GOOGLE_ULONGLONG(0);
  clear_has_as_no();
}
inline ::google::protobuf::uint64 bgp_aggr::as_no() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.bgp_aggr.as_no)
  return as_no_;
}
inline void bgp_aggr::set_as_no(::google::protobuf::uint64 value) {
  set_has_as_no();
  as_no_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.bgp_aggr.as_no)
}

// required uint32 ip = 2;
inline bool bgp_aggr::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bgp_aggr::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bgp_aggr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bgp_aggr::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 bgp_aggr::ip() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.bgp_aggr.ip)
  return ip_;
}
inline void bgp_aggr::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.bgp_aggr.ip)
}

// -------------------------------------------------------------------

// bgp_as_path

// repeated uint64 as_no = 1;
inline int bgp_as_path::as_no_size() const {
  return as_no_.size();
}
inline void bgp_as_path::clear_as_no() {
  as_no_.Clear();
}
inline ::google::protobuf::uint64 bgp_as_path::as_no(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.bgp_as_path.as_no)
  return as_no_.Get(index);
}
inline void bgp_as_path::set_as_no(int index, ::google::protobuf::uint64 value) {
  as_no_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.bgp_as_path.as_no)
}
inline void bgp_as_path::add_as_no(::google::protobuf::uint64 value) {
  as_no_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_bird_bench.bgp_as_path.as_no)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
bgp_as_path::as_no() const {
  // @@protoc_insertion_point(field_list:protobuf_bird_bench.bgp_as_path.as_no)
  return as_no_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
bgp_as_path::mutable_as_no() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_bird_bench.bgp_as_path.as_no)
  return &as_no_;
}

// -------------------------------------------------------------------

// rta_other

// required string key = 1;
inline bool rta_other::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rta_other::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rta_other::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rta_other::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& rta_other::key() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta_other.key)
  return key_.GetNoArena();
}
inline void rta_other::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta_other.key)
}
#if LANG_CXX11
inline void rta_other::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_bird_bench.rta_other.key)
}
#endif
inline void rta_other::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_bird_bench.rta_other.key)
}
inline void rta_other::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_bird_bench.rta_other.key)
}
inline ::std::string* rta_other::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta_other.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rta_other::release_key() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta_other.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rta_other::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta_other.key)
}

// optional string value = 2;
inline bool rta_other::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rta_other::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rta_other::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rta_other::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& rta_other::value() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta_other.value)
  return value_.GetNoArena();
}
inline void rta_other::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta_other.value)
}
#if LANG_CXX11
inline void rta_other::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_bird_bench.rta_other.value)
}
#endif
inline void rta_other::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_bird_bench.rta_other.value)
}
inline void rta_other::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_bird_bench.rta_other.value)
}
inline ::std::string* rta_other::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta_other.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rta_other::release_value() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta_other.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rta_other::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta_other.value)
}

// -------------------------------------------------------------------

// time

// required int32 hour = 1;
inline bool time::has_hour() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void time::set_has_hour() {
  _has_bits_[0] |= 0x00000001u;
}
inline void time::clear_has_hour() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void time::clear_hour() {
  hour_ = 0;
  clear_has_hour();
}
inline ::google::protobuf::int32 time::hour() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.time.hour)
  return hour_;
}
inline void time::set_hour(::google::protobuf::int32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.time.hour)
}

// required int32 min = 2;
inline bool time::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void time::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void time::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void time::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline ::google::protobuf::int32 time::min() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.time.min)
  return min_;
}
inline void time::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.time.min)
}

// required int32 sec = 3;
inline bool time::has_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void time::set_has_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void time::clear_has_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void time::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
inline ::google::protobuf::int32 time::sec() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.time.sec)
  return sec_;
}
inline void time::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.time.sec)
}

// -------------------------------------------------------------------

// rta

// required .protobuf_bird_bench.rta_type type = 1;
inline bool rta::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void rta::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void rta::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void rta::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::protobuf_bird_bench::rta_type rta::type() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.type)
  return static_cast< ::protobuf_bird_bench::rta_type >(type_);
}
inline void rta::set_type(::protobuf_bird_bench::rta_type value) {
  assert(::protobuf_bird_bench::rta_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.type)
}

// required bool tflag = 9;
inline bool rta::has_tflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void rta::set_has_tflag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void rta::clear_has_tflag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void rta::clear_tflag() {
  tflag_ = false;
  clear_has_tflag();
}
inline bool rta::tflag() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.tflag)
  return tflag_;
}
inline void rta::set_tflag(bool value) {
  set_has_tflag();
  tflag_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.tflag)
}

// optional .protobuf_bird_bench.bgp_as_path as_path = 2;
inline bool rta::has_as_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rta::set_has_as_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rta::clear_has_as_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rta::clear_as_path() {
  if (as_path_ != NULL) as_path_->::protobuf_bird_bench::bgp_as_path::Clear();
  clear_has_as_path();
}
inline const ::protobuf_bird_bench::bgp_as_path& rta::as_path() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.as_path)
  return as_path_ != NULL ? *as_path_
                         : *::protobuf_bird_bench::bgp_as_path::internal_default_instance();
}
inline ::protobuf_bird_bench::bgp_as_path* rta::mutable_as_path() {
  set_has_as_path();
  if (as_path_ == NULL) {
    as_path_ = new ::protobuf_bird_bench::bgp_as_path;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta.as_path)
  return as_path_;
}
inline ::protobuf_bird_bench::bgp_as_path* rta::release_as_path() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta.as_path)
  clear_has_as_path();
  ::protobuf_bird_bench::bgp_as_path* temp = as_path_;
  as_path_ = NULL;
  return temp;
}
inline void rta::set_allocated_as_path(::protobuf_bird_bench::bgp_as_path* as_path) {
  delete as_path_;
  as_path_ = as_path;
  if (as_path) {
    set_has_as_path();
  } else {
    clear_has_as_path();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta.as_path)
}

// optional .protobuf_bird_bench.bgp_origin origin = 3;
inline bool rta::has_origin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void rta::set_has_origin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void rta::clear_has_origin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void rta::clear_origin() {
  origin_ = 1;
  clear_has_origin();
}
inline ::protobuf_bird_bench::bgp_origin rta::origin() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.origin)
  return static_cast< ::protobuf_bird_bench::bgp_origin >(origin_);
}
inline void rta::set_origin(::protobuf_bird_bench::bgp_origin value) {
  assert(::protobuf_bird_bench::bgp_origin_IsValid(value));
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.origin)
}

// optional uint32 next_hop = 4;
inline bool rta::has_next_hop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rta::set_has_next_hop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rta::clear_has_next_hop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rta::clear_next_hop() {
  next_hop_ = 0u;
  clear_has_next_hop();
}
inline ::google::protobuf::uint32 rta::next_hop() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.next_hop)
  return next_hop_;
}
inline void rta::set_next_hop(::google::protobuf::uint32 value) {
  set_has_next_hop();
  next_hop_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.next_hop)
}

// optional int32 local_pref = 5;
inline bool rta::has_local_pref() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rta::set_has_local_pref() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rta::clear_has_local_pref() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rta::clear_local_pref() {
  local_pref_ = 0;
  clear_has_local_pref();
}
inline ::google::protobuf::int32 rta::local_pref() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.local_pref)
  return local_pref_;
}
inline void rta::set_local_pref(::google::protobuf::int32 value) {
  set_has_local_pref();
  local_pref_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.local_pref)
}

// optional .protobuf_bird_bench.bgp_community community = 6;
inline bool rta::has_community() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rta::set_has_community() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rta::clear_has_community() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rta::clear_community() {
  if (community_ != NULL) community_->::protobuf_bird_bench::bgp_community::Clear();
  clear_has_community();
}
inline const ::protobuf_bird_bench::bgp_community& rta::community() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.community)
  return community_ != NULL ? *community_
                         : *::protobuf_bird_bench::bgp_community::internal_default_instance();
}
inline ::protobuf_bird_bench::bgp_community* rta::mutable_community() {
  set_has_community();
  if (community_ == NULL) {
    community_ = new ::protobuf_bird_bench::bgp_community;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta.community)
  return community_;
}
inline ::protobuf_bird_bench::bgp_community* rta::release_community() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta.community)
  clear_has_community();
  ::protobuf_bird_bench::bgp_community* temp = community_;
  community_ = NULL;
  return temp;
}
inline void rta::set_allocated_community(::protobuf_bird_bench::bgp_community* community) {
  delete community_;
  community_ = community;
  if (community) {
    set_has_community();
  } else {
    clear_has_community();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta.community)
}

// optional .protobuf_bird_bench.bgp_aggr aggregator = 7;
inline bool rta::has_aggregator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rta::set_has_aggregator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rta::clear_has_aggregator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rta::clear_aggregator() {
  if (aggregator_ != NULL) aggregator_->::protobuf_bird_bench::bgp_aggr::Clear();
  clear_has_aggregator();
}
inline const ::protobuf_bird_bench::bgp_aggr& rta::aggregator() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.aggregator)
  return aggregator_ != NULL ? *aggregator_
                         : *::protobuf_bird_bench::bgp_aggr::internal_default_instance();
}
inline ::protobuf_bird_bench::bgp_aggr* rta::mutable_aggregator() {
  set_has_aggregator();
  if (aggregator_ == NULL) {
    aggregator_ = new ::protobuf_bird_bench::bgp_aggr;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta.aggregator)
  return aggregator_;
}
inline ::protobuf_bird_bench::bgp_aggr* rta::release_aggregator() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta.aggregator)
  clear_has_aggregator();
  ::protobuf_bird_bench::bgp_aggr* temp = aggregator_;
  aggregator_ = NULL;
  return temp;
}
inline void rta::set_allocated_aggregator(::protobuf_bird_bench::bgp_aggr* aggregator) {
  delete aggregator_;
  aggregator_ = aggregator;
  if (aggregator) {
    set_has_aggregator();
  } else {
    clear_has_aggregator();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta.aggregator)
}

// optional .protobuf_bird_bench.rta_other other = 8;
inline bool rta::has_other() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rta::set_has_other() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rta::clear_has_other() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rta::clear_other() {
  if (other_ != NULL) other_->::protobuf_bird_bench::rta_other::Clear();
  clear_has_other();
}
inline const ::protobuf_bird_bench::rta_other& rta::other() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.other)
  return other_ != NULL ? *other_
                         : *::protobuf_bird_bench::rta_other::internal_default_instance();
}
inline ::protobuf_bird_bench::rta_other* rta::mutable_other() {
  set_has_other();
  if (other_ == NULL) {
    other_ = new ::protobuf_bird_bench::rta_other;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta.other)
  return other_;
}
inline ::protobuf_bird_bench::rta_other* rta::release_other() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta.other)
  clear_has_other();
  ::protobuf_bird_bench::rta_other* temp = other_;
  other_ = NULL;
  return temp;
}
inline void rta::set_allocated_other(::protobuf_bird_bench::rta_other* other) {
  delete other_;
  other_ = other;
  if (other) {
    set_has_other();
  } else {
    clear_has_other();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta.other)
}

// -------------------------------------------------------------------

// rte

// required uint32 netaddr = 1;
inline bool rte::has_netaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rte::set_has_netaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rte::clear_has_netaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rte::clear_netaddr() {
  netaddr_ = 0u;
  clear_has_netaddr();
}
inline ::google::protobuf::uint32 rte::netaddr() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.netaddr)
  return netaddr_;
}
inline void rte::set_netaddr(::google::protobuf::uint32 value) {
  set_has_netaddr();
  netaddr_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.netaddr)
}

// required uint32 prefix = 2;
inline bool rte::has_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rte::set_has_prefix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rte::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rte::clear_prefix() {
  prefix_ = 0u;
  clear_has_prefix();
}
inline ::google::protobuf::uint32 rte::prefix() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.prefix)
  return prefix_;
}
inline void rte::set_prefix(::google::protobuf::uint32 value) {
  set_has_prefix();
  prefix_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.prefix)
}

// required uint32 gwaddr = 3;
inline bool rte::has_gwaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rte::set_has_gwaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rte::clear_has_gwaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rte::clear_gwaddr() {
  gwaddr_ = 0u;
  clear_has_gwaddr();
}
inline ::google::protobuf::uint32 rte::gwaddr() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.gwaddr)
  return gwaddr_;
}
inline void rte::set_gwaddr(::google::protobuf::uint32 value) {
  set_has_gwaddr();
  gwaddr_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.gwaddr)
}

// optional uint64 as_no = 4;
inline bool rte::has_as_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rte::set_has_as_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rte::clear_has_as_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rte::clear_as_no() {
  as_no_ = GOOGLE_ULONGLONG(0);
  clear_has_as_no();
}
inline ::google::protobuf::uint64 rte::as_no() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.as_no)
  return as_no_;
}
inline void rte::set_as_no(::google::protobuf::uint64 value) {
  set_has_as_no();
  as_no_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.as_no)
}

// optional string ifname = 7;
inline bool rte::has_ifname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rte::set_has_ifname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rte::clear_has_ifname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rte::clear_ifname() {
  ifname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ifname();
}
inline const ::std::string& rte::ifname() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.ifname)
  return ifname_.GetNoArena();
}
inline void rte::set_ifname(const ::std::string& value) {
  set_has_ifname();
  ifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.ifname)
}
#if LANG_CXX11
inline void rte::set_ifname(::std::string&& value) {
  set_has_ifname();
  ifname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_bird_bench.rte.ifname)
}
#endif
inline void rte::set_ifname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ifname();
  ifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_bird_bench.rte.ifname)
}
inline void rte::set_ifname(const char* value, size_t size) {
  set_has_ifname();
  ifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_bird_bench.rte.ifname)
}
inline ::std::string* rte::mutable_ifname() {
  set_has_ifname();
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rte.ifname)
  return ifname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rte::release_ifname() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rte.ifname)
  clear_has_ifname();
  return ifname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rte::set_allocated_ifname(::std::string* ifname) {
  if (ifname != NULL) {
    set_has_ifname();
  } else {
    clear_has_ifname();
  }
  ifname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ifname);
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rte.ifname)
}

// required .protobuf_bird_bench.time uplink = 8;
inline bool rte::has_uplink() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rte::set_has_uplink() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rte::clear_has_uplink() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rte::clear_uplink() {
  if (uplink_ != NULL) uplink_->::protobuf_bird_bench::time::Clear();
  clear_has_uplink();
}
inline const ::protobuf_bird_bench::time& rte::uplink() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.uplink)
  return uplink_ != NULL ? *uplink_
                         : *::protobuf_bird_bench::time::internal_default_instance();
}
inline ::protobuf_bird_bench::time* rte::mutable_uplink() {
  set_has_uplink();
  if (uplink_ == NULL) {
    uplink_ = new ::protobuf_bird_bench::time;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rte.uplink)
  return uplink_;
}
inline ::protobuf_bird_bench::time* rte::release_uplink() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rte.uplink)
  clear_has_uplink();
  ::protobuf_bird_bench::time* temp = uplink_;
  uplink_ = NULL;
  return temp;
}
inline void rte::set_allocated_uplink(::protobuf_bird_bench::time* uplink) {
  delete uplink_;
  uplink_ = uplink;
  if (uplink) {
    set_has_uplink();
  } else {
    clear_has_uplink();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rte.uplink)
}

// optional uint32 uplink_from = 9;
inline bool rte::has_uplink_from() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void rte::set_has_uplink_from() {
  _has_bits_[0] |= 0x00000080u;
}
inline void rte::clear_has_uplink_from() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void rte::clear_uplink_from() {
  uplink_from_ = 0u;
  clear_has_uplink_from();
}
inline ::google::protobuf::uint32 rte::uplink_from() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.uplink_from)
  return uplink_from_;
}
inline void rte::set_uplink_from(::google::protobuf::uint32 value) {
  set_has_uplink_from();
  uplink_from_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.uplink_from)
}

// required uint32 type = 10;
inline bool rte::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void rte::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void rte::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void rte::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 rte::type() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.type)
  return type_;
}
inline void rte::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.type)
}

// optional .protobuf_bird_bench.rte_src src = 5;
inline bool rte::has_src() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void rte::set_has_src() {
  _has_bits_[0] |= 0x00000040u;
}
inline void rte::clear_has_src() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void rte::clear_src() {
  src_ = 0;
  clear_has_src();
}
inline ::protobuf_bird_bench::rte_src rte::src() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.src)
  return static_cast< ::protobuf_bird_bench::rte_src >(src_);
}
inline void rte::set_src(::protobuf_bird_bench::rte_src value) {
  assert(::protobuf_bird_bench::rte_src_IsValid(value));
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.src)
}

// repeated .protobuf_bird_bench.rta attrs = 6;
inline int rte::attrs_size() const {
  return attrs_.size();
}
inline void rte::clear_attrs() {
  attrs_.Clear();
}
inline const ::protobuf_bird_bench::rta& rte::attrs(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.attrs)
  return attrs_.Get(index);
}
inline ::protobuf_bird_bench::rta* rte::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rte.attrs)
  return attrs_.Mutable(index);
}
inline ::protobuf_bird_bench::rta* rte::add_attrs() {
  // @@protoc_insertion_point(field_add:protobuf_bird_bench.rte.attrs)
  return attrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rta >*
rte::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_bird_bench.rte.attrs)
  return &attrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rta >&
rte::attrs() const {
  // @@protoc_insertion_point(field_list:protobuf_bird_bench.rte.attrs)
  return attrs_;
}

// -------------------------------------------------------------------

// rt

// required string version = 1;
inline bool rt::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rt::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rt::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rt::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& rt::version() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rt.version)
  return version_.GetNoArena();
}
inline void rt::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rt.version)
}
#if LANG_CXX11
inline void rt::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_bird_bench.rt.version)
}
#endif
inline void rt::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_bird_bench.rt.version)
}
inline void rt::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_bird_bench.rt.version)
}
inline ::std::string* rt::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rt.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rt::release_version() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rt.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rt::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rt.version)
}

// repeated .protobuf_bird_bench.rte entries = 2;
inline int rt::entries_size() const {
  return entries_.size();
}
inline void rt::clear_entries() {
  entries_.Clear();
}
inline const ::protobuf_bird_bench::rte& rt::entries(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rt.entries)
  return entries_.Get(index);
}
inline ::protobuf_bird_bench::rte* rt::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rt.entries)
  return entries_.Mutable(index);
}
inline ::protobuf_bird_bench::rte* rt::add_entries() {
  // @@protoc_insertion_point(field_add:protobuf_bird_bench.rt.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rte >*
rt::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_bird_bench.rt.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rte >&
rt::entries() const {
  // @@protoc_insertion_point(field_list:protobuf_bird_bench.rt.entries)
  return entries_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protobuf_bird_bench

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protobuf_bird_bench::rte_src> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_bird_bench::rte_src>() {
  return ::protobuf_bird_bench::rte_src_descriptor();
}
template <> struct is_proto_enum< ::protobuf_bird_bench::rta_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_bird_bench::rta_type>() {
  return ::protobuf_bird_bench::rta_type_descriptor();
}
template <> struct is_proto_enum< ::protobuf_bird_bench::bgp_origin> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_bird_bench::bgp_origin>() {
  return ::protobuf_bird_bench::bgp_origin_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_2eproto__INCLUDED
