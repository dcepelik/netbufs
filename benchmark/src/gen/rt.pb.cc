// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf_bird_bench {
class cflagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<cflag> {
} _cflag_default_instance_;
class bgp_communityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<bgp_community> {
} _bgp_community_default_instance_;
class bgp_aggrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<bgp_aggr> {
} _bgp_aggr_default_instance_;
class bgp_as_pathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<bgp_as_path> {
} _bgp_as_path_default_instance_;
class rta_otherDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rta_other> {
} _rta_other_default_instance_;
class timeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<time> {
} _time_default_instance_;
class rtaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rta> {
} _rta_default_instance_;
class rteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rte> {
} _rte_default_instance_;
class rtDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rt> {
} _rt_default_instance_;

namespace protobuf_rt_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cflag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cflag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cflag, as_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cflag, flag_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_community, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_community, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_community, cflags_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_aggr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_aggr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_aggr, as_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_aggr, ip_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_as_path, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_as_path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp_as_path, as_no_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta_other, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta_other, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta_other, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta_other, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time, sec_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, tflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, as_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, next_hop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, local_pref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, community_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, aggregator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rta, other_),
  7,
  6,
  0,
  8,
  4,
  5,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, netaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, gwaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, as_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, ifname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, uplink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, uplink_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rte, attrs_),
  2,
  3,
  5,
  4,
  0,
  1,
  7,
  8,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rt, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rt, entries_),
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(cflag)},
  { 9, 15, sizeof(bgp_community)},
  { 16, 23, sizeof(bgp_aggr)},
  { 25, 31, sizeof(bgp_as_path)},
  { 32, 39, sizeof(rta_other)},
  { 41, 49, sizeof(time)},
  { 52, 66, sizeof(rta)},
  { 75, 90, sizeof(rte)},
  { 100, 107, sizeof(rt)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_cflag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_bgp_community_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_bgp_aggr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_bgp_as_path_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rta_other_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rte_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rt_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rt.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _cflag_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _bgp_community_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _bgp_aggr_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _bgp_as_path_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _rta_other_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _time_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _rta_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _rte_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _rt_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _cflag_default_instance_.DefaultConstruct();
  _bgp_community_default_instance_.DefaultConstruct();
  _bgp_aggr_default_instance_.DefaultConstruct();
  _bgp_as_path_default_instance_.DefaultConstruct();
  _rta_other_default_instance_.DefaultConstruct();
  _time_default_instance_.DefaultConstruct();
  _rta_default_instance_.DefaultConstruct();
  _rte_default_instance_.DefaultConstruct();
  _rt_default_instance_.DefaultConstruct();
  _rta_default_instance_.get_mutable()->as_path_ = const_cast< ::protobuf_bird_bench::bgp_as_path*>(
      ::protobuf_bird_bench::bgp_as_path::internal_default_instance());
  _rta_default_instance_.get_mutable()->community_ = const_cast< ::protobuf_bird_bench::bgp_community*>(
      ::protobuf_bird_bench::bgp_community::internal_default_instance());
  _rta_default_instance_.get_mutable()->aggregator_ = const_cast< ::protobuf_bird_bench::bgp_aggr*>(
      ::protobuf_bird_bench::bgp_aggr::internal_default_instance());
  _rta_default_instance_.get_mutable()->other_ = const_cast< ::protobuf_bird_bench::rta_other*>(
      ::protobuf_bird_bench::rta_other::internal_default_instance());
  _rte_default_instance_.get_mutable()->uplink_ = const_cast< ::protobuf_bird_bench::time*>(
      ::protobuf_bird_bench::time::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\010rt.proto\022\023protobuf_bird_bench\"$\n\005cflag"
      "\022\r\n\005as_no\030\001 \002(\004\022\014\n\004flag\030\002 \002(\004\";\n\rbgp_com"
      "munity\022*\n\006cflags\030\001 \003(\0132\032.protobuf_bird_b"
      "ench.cflag\"%\n\010bgp_aggr\022\r\n\005as_no\030\001 \002(\004\022\n\n"
      "\002ip\030\002 \002(\r\"\034\n\013bgp_as_path\022\r\n\005as_no\030\001 \003(\004\""
      "\'\n\trta_other\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \001(\t"
      "\".\n\004time\022\014\n\004hour\030\001 \002(\005\022\013\n\003min\030\002 \002(\005\022\013\n\003s"
      "ec\030\003 \002(\005\"\344\002\n\003rta\022+\n\004type\030\001 \002(\0162\035.protobu"
      "f_bird_bench.rta_type\022\r\n\005tflag\030\t \002(\010\0221\n\007"
      "as_path\030\002 \001(\0132 .protobuf_bird_bench.bgp_"
      "as_path\022/\n\006origin\030\003 \001(\0162\037.protobuf_bird_"
      "bench.bgp_origin\022\020\n\010next_hop\030\004 \001(\r\022\022\n\nlo"
      "cal_pref\030\005 \001(\005\0225\n\tcommunity\030\006 \001(\0132\".prot"
      "obuf_bird_bench.bgp_community\0221\n\naggrega"
      "tor\030\007 \001(\0132\035.protobuf_bird_bench.bgp_aggr"
      "\022-\n\005other\030\010 \001(\0132\036.protobuf_bird_bench.rt"
      "a_other\"\367\001\n\003rte\022\017\n\007netaddr\030\001 \002(\r\022\016\n\006pref"
      "ix\030\002 \002(\r\022\016\n\006gwaddr\030\003 \002(\r\022\r\n\005as_no\030\004 \001(\004\022"
      "\016\n\006ifname\030\007 \001(\t\022)\n\006uplink\030\010 \002(\0132\031.protob"
      "uf_bird_bench.time\022\023\n\013uplink_from\030\t \001(\r\022"
      "\014\n\004type\030\n \002(\r\022)\n\003src\030\005 \001(\0162\034.protobuf_bi"
      "rd_bench.rte_src\022\'\n\005attrs\030\006 \003(\0132\030.protob"
      "uf_bird_bench.rta\"@\n\002rt\022\017\n\007version\030\001 \002(\t"
      "\022)\n\007entries\030\002 \003(\0132\030.protobuf_bird_bench."
      "rte*;\n\007rte_src\022\014\n\010INTERNAL\020\000\022\014\n\010EXTERNAL"
      "\020\001\022\005\n\001U\020\002\022\r\n\tWHO_KNOWS\020\003*\203\001\n\010rta_type\022\017\n"
      "\013BGP_AS_PATH\020\001\022\016\n\nBGP_ORIGIN\020\002\022\020\n\014BGP_NE"
      "XT_HOP\020\003\022\022\n\016BGP_LOCAL_PREF\020\004\022\021\n\rBGP_COMM"
      "UNITY\020\005\022\022\n\016BGP_AGGREGATOR\020\006\022\t\n\005OTHER\020\007*."
      "\n\nbgp_origin\022\007\n\003IGP\020\001\022\007\n\003EGP\020\002\022\016\n\nINCOMP"
      "LETE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rt_2eproto

const ::google::protobuf::EnumDescriptor* rte_src_descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_enum_descriptors[0];
}
bool rte_src_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rta_type_descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_enum_descriptors[1];
}
bool rta_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* bgp_origin_descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_enum_descriptors[2];
}
bool bgp_origin_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cflag::kAsNoFieldNumber;
const int cflag::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cflag::cflag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_bird_bench.cflag)
}
cflag::cflag(const cflag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&as_no_, &from.as_no_,
    reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&as_no_) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:protobuf_bird_bench.cflag)
}

void cflag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&as_no_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&as_no_) + sizeof(flag_));
}

cflag::~cflag() {
  // @@protoc_insertion_point(destructor:protobuf_bird_bench.cflag)
  SharedDtor();
}

void cflag::SharedDtor() {
}

void cflag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cflag::descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cflag& cflag::default_instance() {
  protobuf_rt_2eproto::InitDefaults();
  return *internal_default_instance();
}

cflag* cflag::New(::google::protobuf::Arena* arena) const {
  cflag* n = new cflag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cflag::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_bird_bench.cflag)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&as_no_, 0, reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&as_no_) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cflag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_bird_bench.cflag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 as_no = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_as_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &as_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 flag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_bird_bench.cflag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_bird_bench.cflag)
  return false;
#undef DO_
}

void cflag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_bird_bench.cflag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 as_no = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->as_no(), output);
  }

  // required uint64 flag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_bird_bench.cflag)
}

::google::protobuf::uint8* cflag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_bird_bench.cflag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 as_no = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->as_no(), target);
  }

  // required uint64 flag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_bird_bench.cflag)
  return target;
}

size_t cflag::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_bird_bench.cflag)
  size_t total_size = 0;

  if (has_as_no()) {
    // required uint64 as_no = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->as_no());
  }

  if (has_flag()) {
    // required uint64 flag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flag());
  }

  return total_size;
}
size_t cflag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_bird_bench.cflag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 as_no = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->as_no());

    // required uint64 flag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cflag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_bird_bench.cflag)
  GOOGLE_DCHECK_NE(&from, this);
  const cflag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cflag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_bird_bench.cflag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_bird_bench.cflag)
    MergeFrom(*source);
  }
}

void cflag::MergeFrom(const cflag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_bird_bench.cflag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      as_no_ = from.as_no_;
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cflag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_bird_bench.cflag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cflag::CopyFrom(const cflag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_bird_bench.cflag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cflag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void cflag::Swap(cflag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cflag::InternalSwap(cflag* other) {
  std::swap(as_no_, other->as_no_);
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cflag::GetMetadata() const {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cflag

// required uint64 as_no = 1;
bool cflag::has_as_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void cflag::set_has_as_no() {
  _has_bits_[0] |= 0x00000001u;
}
void cflag::clear_has_as_no() {
  _has_bits_[0] &= ~0x00000001u;
}
void cflag::clear_as_no() {
  as_no_ = GOOGLE_ULONGLONG(0);
  clear_has_as_no();
}
::google::protobuf::uint64 cflag::as_no() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.cflag.as_no)
  return as_no_;
}
void cflag::set_as_no(::google::protobuf::uint64 value) {
  set_has_as_no();
  as_no_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.cflag.as_no)
}

// required uint64 flag = 2;
bool cflag::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void cflag::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
void cflag::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
void cflag::clear_flag() {
  flag_ = GOOGLE_ULONGLONG(0);
  clear_has_flag();
}
::google::protobuf::uint64 cflag::flag() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.cflag.flag)
  return flag_;
}
void cflag::set_flag(::google::protobuf::uint64 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.cflag.flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bgp_community::kCflagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bgp_community::bgp_community()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_bird_bench.bgp_community)
}
bgp_community::bgp_community(const bgp_community& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cflags_(from.cflags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_bird_bench.bgp_community)
}

void bgp_community::SharedCtor() {
  _cached_size_ = 0;
}

bgp_community::~bgp_community() {
  // @@protoc_insertion_point(destructor:protobuf_bird_bench.bgp_community)
  SharedDtor();
}

void bgp_community::SharedDtor() {
}

void bgp_community::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bgp_community::descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bgp_community& bgp_community::default_instance() {
  protobuf_rt_2eproto::InitDefaults();
  return *internal_default_instance();
}

bgp_community* bgp_community::New(::google::protobuf::Arena* arena) const {
  bgp_community* n = new bgp_community;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bgp_community::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_bird_bench.bgp_community)
  cflags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bgp_community::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_bird_bench.bgp_community)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf_bird_bench.cflag cflags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cflags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_bird_bench.bgp_community)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_bird_bench.bgp_community)
  return false;
#undef DO_
}

void bgp_community::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_bird_bench.bgp_community)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf_bird_bench.cflag cflags = 1;
  for (unsigned int i = 0, n = this->cflags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cflags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_bird_bench.bgp_community)
}

::google::protobuf::uint8* bgp_community::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_bird_bench.bgp_community)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf_bird_bench.cflag cflags = 1;
  for (unsigned int i = 0, n = this->cflags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cflags(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_bird_bench.bgp_community)
  return target;
}

size_t bgp_community::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_bird_bench.bgp_community)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protobuf_bird_bench.cflag cflags = 1;
  {
    unsigned int count = this->cflags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cflags(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bgp_community::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_bird_bench.bgp_community)
  GOOGLE_DCHECK_NE(&from, this);
  const bgp_community* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bgp_community>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_bird_bench.bgp_community)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_bird_bench.bgp_community)
    MergeFrom(*source);
  }
}

void bgp_community::MergeFrom(const bgp_community& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_bird_bench.bgp_community)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cflags_.MergeFrom(from.cflags_);
}

void bgp_community::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_bird_bench.bgp_community)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bgp_community::CopyFrom(const bgp_community& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_bird_bench.bgp_community)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bgp_community::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->cflags())) return false;
  return true;
}

void bgp_community::Swap(bgp_community* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bgp_community::InternalSwap(bgp_community* other) {
  cflags_.InternalSwap(&other->cflags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bgp_community::GetMetadata() const {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bgp_community

// repeated .protobuf_bird_bench.cflag cflags = 1;
int bgp_community::cflags_size() const {
  return cflags_.size();
}
void bgp_community::clear_cflags() {
  cflags_.Clear();
}
const ::protobuf_bird_bench::cflag& bgp_community::cflags(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.bgp_community.cflags)
  return cflags_.Get(index);
}
::protobuf_bird_bench::cflag* bgp_community::mutable_cflags(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.bgp_community.cflags)
  return cflags_.Mutable(index);
}
::protobuf_bird_bench::cflag* bgp_community::add_cflags() {
  // @@protoc_insertion_point(field_add:protobuf_bird_bench.bgp_community.cflags)
  return cflags_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::cflag >*
bgp_community::mutable_cflags() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_bird_bench.bgp_community.cflags)
  return &cflags_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::cflag >&
bgp_community::cflags() const {
  // @@protoc_insertion_point(field_list:protobuf_bird_bench.bgp_community.cflags)
  return cflags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bgp_aggr::kAsNoFieldNumber;
const int bgp_aggr::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bgp_aggr::bgp_aggr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_bird_bench.bgp_aggr)
}
bgp_aggr::bgp_aggr(const bgp_aggr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&as_no_, &from.as_no_,
    reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&as_no_) + sizeof(ip_));
  // @@protoc_insertion_point(copy_constructor:protobuf_bird_bench.bgp_aggr)
}

void bgp_aggr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&as_no_, 0, reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&as_no_) + sizeof(ip_));
}

bgp_aggr::~bgp_aggr() {
  // @@protoc_insertion_point(destructor:protobuf_bird_bench.bgp_aggr)
  SharedDtor();
}

void bgp_aggr::SharedDtor() {
}

void bgp_aggr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bgp_aggr::descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bgp_aggr& bgp_aggr::default_instance() {
  protobuf_rt_2eproto::InitDefaults();
  return *internal_default_instance();
}

bgp_aggr* bgp_aggr::New(::google::protobuf::Arena* arena) const {
  bgp_aggr* n = new bgp_aggr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bgp_aggr::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_bird_bench.bgp_aggr)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&as_no_, 0, reinterpret_cast<char*>(&ip_) -
      reinterpret_cast<char*>(&as_no_) + sizeof(ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bgp_aggr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_bird_bench.bgp_aggr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 as_no = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_as_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &as_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_bird_bench.bgp_aggr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_bird_bench.bgp_aggr)
  return false;
#undef DO_
}

void bgp_aggr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_bird_bench.bgp_aggr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 as_no = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->as_no(), output);
  }

  // required uint32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_bird_bench.bgp_aggr)
}

::google::protobuf::uint8* bgp_aggr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_bird_bench.bgp_aggr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 as_no = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->as_no(), target);
  }

  // required uint32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_bird_bench.bgp_aggr)
  return target;
}

size_t bgp_aggr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_bird_bench.bgp_aggr)
  size_t total_size = 0;

  if (has_as_no()) {
    // required uint64 as_no = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->as_no());
  }

  if (has_ip()) {
    // required uint32 ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  return total_size;
}
size_t bgp_aggr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_bird_bench.bgp_aggr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 as_no = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->as_no());

    // required uint32 ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bgp_aggr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_bird_bench.bgp_aggr)
  GOOGLE_DCHECK_NE(&from, this);
  const bgp_aggr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bgp_aggr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_bird_bench.bgp_aggr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_bird_bench.bgp_aggr)
    MergeFrom(*source);
  }
}

void bgp_aggr::MergeFrom(const bgp_aggr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_bird_bench.bgp_aggr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      as_no_ = from.as_no_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bgp_aggr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_bird_bench.bgp_aggr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bgp_aggr::CopyFrom(const bgp_aggr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_bird_bench.bgp_aggr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bgp_aggr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void bgp_aggr::Swap(bgp_aggr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bgp_aggr::InternalSwap(bgp_aggr* other) {
  std::swap(as_no_, other->as_no_);
  std::swap(ip_, other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bgp_aggr::GetMetadata() const {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bgp_aggr

// required uint64 as_no = 1;
bool bgp_aggr::has_as_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void bgp_aggr::set_has_as_no() {
  _has_bits_[0] |= 0x00000001u;
}
void bgp_aggr::clear_has_as_no() {
  _has_bits_[0] &= ~0x00000001u;
}
void bgp_aggr::clear_as_no() {
  as_no_ = GOOGLE_ULONGLONG(0);
  clear_has_as_no();
}
::google::protobuf::uint64 bgp_aggr::as_no() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.bgp_aggr.as_no)
  return as_no_;
}
void bgp_aggr::set_as_no(::google::protobuf::uint64 value) {
  set_has_as_no();
  as_no_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.bgp_aggr.as_no)
}

// required uint32 ip = 2;
bool bgp_aggr::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void bgp_aggr::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void bgp_aggr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void bgp_aggr::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 bgp_aggr::ip() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.bgp_aggr.ip)
  return ip_;
}
void bgp_aggr::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.bgp_aggr.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bgp_as_path::kAsNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bgp_as_path::bgp_as_path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_bird_bench.bgp_as_path)
}
bgp_as_path::bgp_as_path(const bgp_as_path& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      as_no_(from.as_no_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_bird_bench.bgp_as_path)
}

void bgp_as_path::SharedCtor() {
  _cached_size_ = 0;
}

bgp_as_path::~bgp_as_path() {
  // @@protoc_insertion_point(destructor:protobuf_bird_bench.bgp_as_path)
  SharedDtor();
}

void bgp_as_path::SharedDtor() {
}

void bgp_as_path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bgp_as_path::descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bgp_as_path& bgp_as_path::default_instance() {
  protobuf_rt_2eproto::InitDefaults();
  return *internal_default_instance();
}

bgp_as_path* bgp_as_path::New(::google::protobuf::Arena* arena) const {
  bgp_as_path* n = new bgp_as_path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bgp_as_path::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_bird_bench.bgp_as_path)
  as_no_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bgp_as_path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_bird_bench.bgp_as_path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 as_no = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_as_no())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_as_no())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_bird_bench.bgp_as_path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_bird_bench.bgp_as_path)
  return false;
#undef DO_
}

void bgp_as_path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_bird_bench.bgp_as_path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 as_no = 1;
  for (int i = 0, n = this->as_no_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->as_no(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_bird_bench.bgp_as_path)
}

::google::protobuf::uint8* bgp_as_path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_bird_bench.bgp_as_path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 as_no = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->as_no_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_bird_bench.bgp_as_path)
  return target;
}

size_t bgp_as_path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_bird_bench.bgp_as_path)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 as_no = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->as_no_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->as_no_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bgp_as_path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_bird_bench.bgp_as_path)
  GOOGLE_DCHECK_NE(&from, this);
  const bgp_as_path* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bgp_as_path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_bird_bench.bgp_as_path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_bird_bench.bgp_as_path)
    MergeFrom(*source);
  }
}

void bgp_as_path::MergeFrom(const bgp_as_path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_bird_bench.bgp_as_path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  as_no_.MergeFrom(from.as_no_);
}

void bgp_as_path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_bird_bench.bgp_as_path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bgp_as_path::CopyFrom(const bgp_as_path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_bird_bench.bgp_as_path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bgp_as_path::IsInitialized() const {
  return true;
}

void bgp_as_path::Swap(bgp_as_path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bgp_as_path::InternalSwap(bgp_as_path* other) {
  as_no_.InternalSwap(&other->as_no_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bgp_as_path::GetMetadata() const {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bgp_as_path

// repeated uint64 as_no = 1;
int bgp_as_path::as_no_size() const {
  return as_no_.size();
}
void bgp_as_path::clear_as_no() {
  as_no_.Clear();
}
::google::protobuf::uint64 bgp_as_path::as_no(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.bgp_as_path.as_no)
  return as_no_.Get(index);
}
void bgp_as_path::set_as_no(int index, ::google::protobuf::uint64 value) {
  as_no_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.bgp_as_path.as_no)
}
void bgp_as_path::add_as_no(::google::protobuf::uint64 value) {
  as_no_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_bird_bench.bgp_as_path.as_no)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
bgp_as_path::as_no() const {
  // @@protoc_insertion_point(field_list:protobuf_bird_bench.bgp_as_path.as_no)
  return as_no_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
bgp_as_path::mutable_as_no() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_bird_bench.bgp_as_path.as_no)
  return &as_no_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rta_other::kKeyFieldNumber;
const int rta_other::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rta_other::rta_other()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_bird_bench.rta_other)
}
rta_other::rta_other(const rta_other& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_bird_bench.rta_other)
}

void rta_other::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

rta_other::~rta_other() {
  // @@protoc_insertion_point(destructor:protobuf_bird_bench.rta_other)
  SharedDtor();
}

void rta_other::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rta_other::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rta_other::descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rta_other& rta_other::default_instance() {
  protobuf_rt_2eproto::InitDefaults();
  return *internal_default_instance();
}

rta_other* rta_other::New(::google::protobuf::Arena* arena) const {
  rta_other* n = new rta_other;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rta_other::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_bird_bench.rta_other)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rta_other::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_bird_bench.rta_other)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf_bird_bench.rta_other.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf_bird_bench.rta_other.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_bird_bench.rta_other)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_bird_bench.rta_other)
  return false;
#undef DO_
}

void rta_other::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_bird_bench.rta_other)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf_bird_bench.rta_other.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf_bird_bench.rta_other.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_bird_bench.rta_other)
}

::google::protobuf::uint8* rta_other::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_bird_bench.rta_other)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf_bird_bench.rta_other.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf_bird_bench.rta_other.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_bird_bench.rta_other)
  return target;
}

size_t rta_other::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_bird_bench.rta_other)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  // optional string value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rta_other::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_bird_bench.rta_other)
  GOOGLE_DCHECK_NE(&from, this);
  const rta_other* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rta_other>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_bird_bench.rta_other)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_bird_bench.rta_other)
    MergeFrom(*source);
  }
}

void rta_other::MergeFrom(const rta_other& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_bird_bench.rta_other)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void rta_other::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_bird_bench.rta_other)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rta_other::CopyFrom(const rta_other& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_bird_bench.rta_other)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rta_other::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void rta_other::Swap(rta_other* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rta_other::InternalSwap(rta_other* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rta_other::GetMetadata() const {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rta_other

// required string key = 1;
bool rta_other::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void rta_other::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void rta_other::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void rta_other::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& rta_other::key() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta_other.key)
  return key_.GetNoArena();
}
void rta_other::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta_other.key)
}
#if LANG_CXX11
void rta_other::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_bird_bench.rta_other.key)
}
#endif
void rta_other::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_bird_bench.rta_other.key)
}
void rta_other::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_bird_bench.rta_other.key)
}
::std::string* rta_other::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta_other.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rta_other::release_key() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta_other.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rta_other::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta_other.key)
}

// optional string value = 2;
bool rta_other::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void rta_other::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void rta_other::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void rta_other::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& rta_other::value() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta_other.value)
  return value_.GetNoArena();
}
void rta_other::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta_other.value)
}
#if LANG_CXX11
void rta_other::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_bird_bench.rta_other.value)
}
#endif
void rta_other::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_bird_bench.rta_other.value)
}
void rta_other::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_bird_bench.rta_other.value)
}
::std::string* rta_other::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta_other.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rta_other::release_value() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta_other.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rta_other::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta_other.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int time::kHourFieldNumber;
const int time::kMinFieldNumber;
const int time::kSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

time::time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_bird_bench.time)
}
time::time(const time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hour_, &from.hour_,
    reinterpret_cast<char*>(&sec_) -
    reinterpret_cast<char*>(&hour_) + sizeof(sec_));
  // @@protoc_insertion_point(copy_constructor:protobuf_bird_bench.time)
}

void time::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hour_, 0, reinterpret_cast<char*>(&sec_) -
    reinterpret_cast<char*>(&hour_) + sizeof(sec_));
}

time::~time() {
  // @@protoc_insertion_point(destructor:protobuf_bird_bench.time)
  SharedDtor();
}

void time::SharedDtor() {
}

void time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* time::descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const time& time::default_instance() {
  protobuf_rt_2eproto::InitDefaults();
  return *internal_default_instance();
}

time* time::New(::google::protobuf::Arena* arena) const {
  time* n = new time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void time::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_bird_bench.time)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&hour_, 0, reinterpret_cast<char*>(&sec_) -
      reinterpret_cast<char*>(&hour_) + sizeof(sec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_bird_bench.time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hour = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_bird_bench.time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_bird_bench.time)
  return false;
#undef DO_
}

void time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_bird_bench.time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 hour = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hour(), output);
  }

  // required int32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min(), output);
  }

  // required int32 sec = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_bird_bench.time)
}

::google::protobuf::uint8* time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_bird_bench.time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 hour = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hour(), target);
  }

  // required int32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min(), target);
  }

  // required int32 sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_bird_bench.time)
  return target;
}

size_t time::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_bird_bench.time)
  size_t total_size = 0;

  if (has_hour()) {
    // required int32 hour = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hour());
  }

  if (has_min()) {
    // required int32 min = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min());
  }

  if (has_sec()) {
    // required int32 sec = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sec());
  }

  return total_size;
}
size_t time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_bird_bench.time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 hour = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hour());

    // required int32 min = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min());

    // required int32 sec = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sec());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_bird_bench.time)
  GOOGLE_DCHECK_NE(&from, this);
  const time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_bird_bench.time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_bird_bench.time)
    MergeFrom(*source);
  }
}

void time::MergeFrom(const time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_bird_bench.time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      sec_ = from.sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_bird_bench.time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void time::CopyFrom(const time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_bird_bench.time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void time::Swap(time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void time::InternalSwap(time* other) {
  std::swap(hour_, other->hour_);
  std::swap(min_, other->min_);
  std::swap(sec_, other->sec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata time::GetMetadata() const {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// time

// required int32 hour = 1;
bool time::has_hour() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void time::set_has_hour() {
  _has_bits_[0] |= 0x00000001u;
}
void time::clear_has_hour() {
  _has_bits_[0] &= ~0x00000001u;
}
void time::clear_hour() {
  hour_ = 0;
  clear_has_hour();
}
::google::protobuf::int32 time::hour() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.time.hour)
  return hour_;
}
void time::set_hour(::google::protobuf::int32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.time.hour)
}

// required int32 min = 2;
bool time::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void time::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
void time::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void time::clear_min() {
  min_ = 0;
  clear_has_min();
}
::google::protobuf::int32 time::min() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.time.min)
  return min_;
}
void time::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.time.min)
}

// required int32 sec = 3;
bool time::has_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void time::set_has_sec() {
  _has_bits_[0] |= 0x00000004u;
}
void time::clear_has_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
void time::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
::google::protobuf::int32 time::sec() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.time.sec)
  return sec_;
}
void time::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.time.sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rta::kTypeFieldNumber;
const int rta::kTflagFieldNumber;
const int rta::kAsPathFieldNumber;
const int rta::kOriginFieldNumber;
const int rta::kNextHopFieldNumber;
const int rta::kLocalPrefFieldNumber;
const int rta::kCommunityFieldNumber;
const int rta::kAggregatorFieldNumber;
const int rta::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rta::rta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_bird_bench.rta)
}
rta::rta(const rta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_as_path()) {
    as_path_ = new ::protobuf_bird_bench::bgp_as_path(*from.as_path_);
  } else {
    as_path_ = NULL;
  }
  if (from.has_community()) {
    community_ = new ::protobuf_bird_bench::bgp_community(*from.community_);
  } else {
    community_ = NULL;
  }
  if (from.has_aggregator()) {
    aggregator_ = new ::protobuf_bird_bench::bgp_aggr(*from.aggregator_);
  } else {
    aggregator_ = NULL;
  }
  if (from.has_other()) {
    other_ = new ::protobuf_bird_bench::rta_other(*from.other_);
  } else {
    other_ = NULL;
  }
  ::memcpy(&next_hop_, &from.next_hop_,
    reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&next_hop_) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:protobuf_bird_bench.rta)
}

void rta::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&as_path_, 0, reinterpret_cast<char*>(&tflag_) -
    reinterpret_cast<char*>(&as_path_) + sizeof(tflag_));
  type_ = 1;
  origin_ = 1;
}

rta::~rta() {
  // @@protoc_insertion_point(destructor:protobuf_bird_bench.rta)
  SharedDtor();
}

void rta::SharedDtor() {
  if (this != internal_default_instance()) {
    delete as_path_;
  }
  if (this != internal_default_instance()) {
    delete community_;
  }
  if (this != internal_default_instance()) {
    delete aggregator_;
  }
  if (this != internal_default_instance()) {
    delete other_;
  }
}

void rta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rta::descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rta& rta::default_instance() {
  protobuf_rt_2eproto::InitDefaults();
  return *internal_default_instance();
}

rta* rta::New(::google::protobuf::Arena* arena) const {
  rta* n = new rta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rta::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_bird_bench.rta)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_as_path()) {
      GOOGLE_DCHECK(as_path_ != NULL);
      as_path_->::protobuf_bird_bench::bgp_as_path::Clear();
    }
    if (has_community()) {
      GOOGLE_DCHECK(community_ != NULL);
      community_->::protobuf_bird_bench::bgp_community::Clear();
    }
    if (has_aggregator()) {
      GOOGLE_DCHECK(aggregator_ != NULL);
      aggregator_->::protobuf_bird_bench::bgp_aggr::Clear();
    }
    if (has_other()) {
      GOOGLE_DCHECK(other_ != NULL);
      other_->::protobuf_bird_bench::rta_other::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&next_hop_, 0, reinterpret_cast<char*>(&tflag_) -
      reinterpret_cast<char*>(&next_hop_) + sizeof(tflag_));
    type_ = 1;
  }
  origin_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_bird_bench.rta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf_bird_bench.rta_type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_bird_bench::rta_type_IsValid(value)) {
            set_type(static_cast< ::protobuf_bird_bench::rta_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protobuf_bird_bench.bgp_as_path as_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_as_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protobuf_bird_bench.bgp_origin origin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_bird_bench::bgp_origin_IsValid(value)) {
            set_origin(static_cast< ::protobuf_bird_bench::bgp_origin >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 next_hop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_next_hop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_hop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 local_pref = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_local_pref();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_pref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protobuf_bird_bench.bgp_community community = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_community()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protobuf_bird_bench.bgp_aggr aggregator = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aggregator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protobuf_bird_bench.rta_other other = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool tflag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_tflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_bird_bench.rta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_bird_bench.rta)
  return false;
#undef DO_
}

void rta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_bird_bench.rta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protobuf_bird_bench.rta_type type = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .protobuf_bird_bench.bgp_as_path as_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->as_path_, output);
  }

  // optional .protobuf_bird_bench.bgp_origin origin = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->origin(), output);
  }

  // optional uint32 next_hop = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->next_hop(), output);
  }

  // optional int32 local_pref = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->local_pref(), output);
  }

  // optional .protobuf_bird_bench.bgp_community community = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->community_, output);
  }

  // optional .protobuf_bird_bench.bgp_aggr aggregator = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->aggregator_, output);
  }

  // optional .protobuf_bird_bench.rta_other other = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->other_, output);
  }

  // required bool tflag = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->tflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_bird_bench.rta)
}

::google::protobuf::uint8* rta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_bird_bench.rta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protobuf_bird_bench.rta_type type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .protobuf_bird_bench.bgp_as_path as_path = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->as_path_, deterministic, target);
  }

  // optional .protobuf_bird_bench.bgp_origin origin = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->origin(), target);
  }

  // optional uint32 next_hop = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->next_hop(), target);
  }

  // optional int32 local_pref = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->local_pref(), target);
  }

  // optional .protobuf_bird_bench.bgp_community community = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->community_, deterministic, target);
  }

  // optional .protobuf_bird_bench.bgp_aggr aggregator = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->aggregator_, deterministic, target);
  }

  // optional .protobuf_bird_bench.rta_other other = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->other_, deterministic, target);
  }

  // required bool tflag = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->tflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_bird_bench.rta)
  return target;
}

size_t rta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_bird_bench.rta)
  size_t total_size = 0;

  if (has_tflag()) {
    // required bool tflag = 9;
    total_size += 1 + 1;
  }

  if (has_type()) {
    // required .protobuf_bird_bench.rta_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t rta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_bird_bench.rta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000c0) ^ 0x000000c0) == 0) {  // All required fields are present.
    // required bool tflag = 9;
    total_size += 1 + 1;

    // required .protobuf_bird_bench.rta_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .protobuf_bird_bench.bgp_as_path as_path = 2;
    if (has_as_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->as_path_);
    }

    // optional .protobuf_bird_bench.bgp_community community = 6;
    if (has_community()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->community_);
    }

    // optional .protobuf_bird_bench.bgp_aggr aggregator = 7;
    if (has_aggregator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->aggregator_);
    }

    // optional .protobuf_bird_bench.rta_other other = 8;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->other_);
    }

    // optional uint32 next_hop = 4;
    if (has_next_hop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_hop());
    }

    // optional int32 local_pref = 5;
    if (has_local_pref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_pref());
    }

  }
  // optional .protobuf_bird_bench.bgp_origin origin = 3;
  if (has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_bird_bench.rta)
  GOOGLE_DCHECK_NE(&from, this);
  const rta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_bird_bench.rta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_bird_bench.rta)
    MergeFrom(*source);
  }
}

void rta::MergeFrom(const rta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_bird_bench.rta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_as_path()->::protobuf_bird_bench::bgp_as_path::MergeFrom(from.as_path());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_community()->::protobuf_bird_bench::bgp_community::MergeFrom(from.community());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_aggregator()->::protobuf_bird_bench::bgp_aggr::MergeFrom(from.aggregator());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_other()->::protobuf_bird_bench::rta_other::MergeFrom(from.other());
    }
    if (cached_has_bits & 0x00000010u) {
      next_hop_ = from.next_hop_;
    }
    if (cached_has_bits & 0x00000020u) {
      local_pref_ = from.local_pref_;
    }
    if (cached_has_bits & 0x00000040u) {
      tflag_ = from.tflag_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_origin(from.origin());
  }
}

void rta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_bird_bench.rta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rta::CopyFrom(const rta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_bird_bench.rta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rta::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c0) != 0x000000c0) return false;
  if (has_community()) {
    if (!this->community_->IsInitialized()) return false;
  }
  if (has_aggregator()) {
    if (!this->aggregator_->IsInitialized()) return false;
  }
  if (has_other()) {
    if (!this->other_->IsInitialized()) return false;
  }
  return true;
}

void rta::Swap(rta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rta::InternalSwap(rta* other) {
  std::swap(as_path_, other->as_path_);
  std::swap(community_, other->community_);
  std::swap(aggregator_, other->aggregator_);
  std::swap(other_, other->other_);
  std::swap(next_hop_, other->next_hop_);
  std::swap(local_pref_, other->local_pref_);
  std::swap(tflag_, other->tflag_);
  std::swap(type_, other->type_);
  std::swap(origin_, other->origin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rta::GetMetadata() const {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rta

// required .protobuf_bird_bench.rta_type type = 1;
bool rta::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void rta::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void rta::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void rta::clear_type() {
  type_ = 1;
  clear_has_type();
}
::protobuf_bird_bench::rta_type rta::type() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.type)
  return static_cast< ::protobuf_bird_bench::rta_type >(type_);
}
void rta::set_type(::protobuf_bird_bench::rta_type value) {
  assert(::protobuf_bird_bench::rta_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.type)
}

// required bool tflag = 9;
bool rta::has_tflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void rta::set_has_tflag() {
  _has_bits_[0] |= 0x00000040u;
}
void rta::clear_has_tflag() {
  _has_bits_[0] &= ~0x00000040u;
}
void rta::clear_tflag() {
  tflag_ = false;
  clear_has_tflag();
}
bool rta::tflag() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.tflag)
  return tflag_;
}
void rta::set_tflag(bool value) {
  set_has_tflag();
  tflag_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.tflag)
}

// optional .protobuf_bird_bench.bgp_as_path as_path = 2;
bool rta::has_as_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void rta::set_has_as_path() {
  _has_bits_[0] |= 0x00000001u;
}
void rta::clear_has_as_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void rta::clear_as_path() {
  if (as_path_ != NULL) as_path_->::protobuf_bird_bench::bgp_as_path::Clear();
  clear_has_as_path();
}
const ::protobuf_bird_bench::bgp_as_path& rta::as_path() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.as_path)
  return as_path_ != NULL ? *as_path_
                         : *::protobuf_bird_bench::bgp_as_path::internal_default_instance();
}
::protobuf_bird_bench::bgp_as_path* rta::mutable_as_path() {
  set_has_as_path();
  if (as_path_ == NULL) {
    as_path_ = new ::protobuf_bird_bench::bgp_as_path;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta.as_path)
  return as_path_;
}
::protobuf_bird_bench::bgp_as_path* rta::release_as_path() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta.as_path)
  clear_has_as_path();
  ::protobuf_bird_bench::bgp_as_path* temp = as_path_;
  as_path_ = NULL;
  return temp;
}
void rta::set_allocated_as_path(::protobuf_bird_bench::bgp_as_path* as_path) {
  delete as_path_;
  as_path_ = as_path;
  if (as_path) {
    set_has_as_path();
  } else {
    clear_has_as_path();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta.as_path)
}

// optional .protobuf_bird_bench.bgp_origin origin = 3;
bool rta::has_origin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void rta::set_has_origin() {
  _has_bits_[0] |= 0x00000100u;
}
void rta::clear_has_origin() {
  _has_bits_[0] &= ~0x00000100u;
}
void rta::clear_origin() {
  origin_ = 1;
  clear_has_origin();
}
::protobuf_bird_bench::bgp_origin rta::origin() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.origin)
  return static_cast< ::protobuf_bird_bench::bgp_origin >(origin_);
}
void rta::set_origin(::protobuf_bird_bench::bgp_origin value) {
  assert(::protobuf_bird_bench::bgp_origin_IsValid(value));
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.origin)
}

// optional uint32 next_hop = 4;
bool rta::has_next_hop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void rta::set_has_next_hop() {
  _has_bits_[0] |= 0x00000010u;
}
void rta::clear_has_next_hop() {
  _has_bits_[0] &= ~0x00000010u;
}
void rta::clear_next_hop() {
  next_hop_ = 0u;
  clear_has_next_hop();
}
::google::protobuf::uint32 rta::next_hop() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.next_hop)
  return next_hop_;
}
void rta::set_next_hop(::google::protobuf::uint32 value) {
  set_has_next_hop();
  next_hop_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.next_hop)
}

// optional int32 local_pref = 5;
bool rta::has_local_pref() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void rta::set_has_local_pref() {
  _has_bits_[0] |= 0x00000020u;
}
void rta::clear_has_local_pref() {
  _has_bits_[0] &= ~0x00000020u;
}
void rta::clear_local_pref() {
  local_pref_ = 0;
  clear_has_local_pref();
}
::google::protobuf::int32 rta::local_pref() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.local_pref)
  return local_pref_;
}
void rta::set_local_pref(::google::protobuf::int32 value) {
  set_has_local_pref();
  local_pref_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rta.local_pref)
}

// optional .protobuf_bird_bench.bgp_community community = 6;
bool rta::has_community() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void rta::set_has_community() {
  _has_bits_[0] |= 0x00000002u;
}
void rta::clear_has_community() {
  _has_bits_[0] &= ~0x00000002u;
}
void rta::clear_community() {
  if (community_ != NULL) community_->::protobuf_bird_bench::bgp_community::Clear();
  clear_has_community();
}
const ::protobuf_bird_bench::bgp_community& rta::community() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.community)
  return community_ != NULL ? *community_
                         : *::protobuf_bird_bench::bgp_community::internal_default_instance();
}
::protobuf_bird_bench::bgp_community* rta::mutable_community() {
  set_has_community();
  if (community_ == NULL) {
    community_ = new ::protobuf_bird_bench::bgp_community;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta.community)
  return community_;
}
::protobuf_bird_bench::bgp_community* rta::release_community() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta.community)
  clear_has_community();
  ::protobuf_bird_bench::bgp_community* temp = community_;
  community_ = NULL;
  return temp;
}
void rta::set_allocated_community(::protobuf_bird_bench::bgp_community* community) {
  delete community_;
  community_ = community;
  if (community) {
    set_has_community();
  } else {
    clear_has_community();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta.community)
}

// optional .protobuf_bird_bench.bgp_aggr aggregator = 7;
bool rta::has_aggregator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void rta::set_has_aggregator() {
  _has_bits_[0] |= 0x00000004u;
}
void rta::clear_has_aggregator() {
  _has_bits_[0] &= ~0x00000004u;
}
void rta::clear_aggregator() {
  if (aggregator_ != NULL) aggregator_->::protobuf_bird_bench::bgp_aggr::Clear();
  clear_has_aggregator();
}
const ::protobuf_bird_bench::bgp_aggr& rta::aggregator() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.aggregator)
  return aggregator_ != NULL ? *aggregator_
                         : *::protobuf_bird_bench::bgp_aggr::internal_default_instance();
}
::protobuf_bird_bench::bgp_aggr* rta::mutable_aggregator() {
  set_has_aggregator();
  if (aggregator_ == NULL) {
    aggregator_ = new ::protobuf_bird_bench::bgp_aggr;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta.aggregator)
  return aggregator_;
}
::protobuf_bird_bench::bgp_aggr* rta::release_aggregator() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta.aggregator)
  clear_has_aggregator();
  ::protobuf_bird_bench::bgp_aggr* temp = aggregator_;
  aggregator_ = NULL;
  return temp;
}
void rta::set_allocated_aggregator(::protobuf_bird_bench::bgp_aggr* aggregator) {
  delete aggregator_;
  aggregator_ = aggregator;
  if (aggregator) {
    set_has_aggregator();
  } else {
    clear_has_aggregator();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta.aggregator)
}

// optional .protobuf_bird_bench.rta_other other = 8;
bool rta::has_other() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void rta::set_has_other() {
  _has_bits_[0] |= 0x00000008u;
}
void rta::clear_has_other() {
  _has_bits_[0] &= ~0x00000008u;
}
void rta::clear_other() {
  if (other_ != NULL) other_->::protobuf_bird_bench::rta_other::Clear();
  clear_has_other();
}
const ::protobuf_bird_bench::rta_other& rta::other() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rta.other)
  return other_ != NULL ? *other_
                         : *::protobuf_bird_bench::rta_other::internal_default_instance();
}
::protobuf_bird_bench::rta_other* rta::mutable_other() {
  set_has_other();
  if (other_ == NULL) {
    other_ = new ::protobuf_bird_bench::rta_other;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rta.other)
  return other_;
}
::protobuf_bird_bench::rta_other* rta::release_other() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rta.other)
  clear_has_other();
  ::protobuf_bird_bench::rta_other* temp = other_;
  other_ = NULL;
  return temp;
}
void rta::set_allocated_other(::protobuf_bird_bench::rta_other* other) {
  delete other_;
  other_ = other;
  if (other) {
    set_has_other();
  } else {
    clear_has_other();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rta.other)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rte::kNetaddrFieldNumber;
const int rte::kPrefixFieldNumber;
const int rte::kGwaddrFieldNumber;
const int rte::kAsNoFieldNumber;
const int rte::kIfnameFieldNumber;
const int rte::kUplinkFieldNumber;
const int rte::kUplinkFromFieldNumber;
const int rte::kTypeFieldNumber;
const int rte::kSrcFieldNumber;
const int rte::kAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rte::rte()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_bird_bench.rte)
}
rte::rte(const rte& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      attrs_(from.attrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ifname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ifname()) {
    ifname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ifname_);
  }
  if (from.has_uplink()) {
    uplink_ = new ::protobuf_bird_bench::time(*from.uplink_);
  } else {
    uplink_ = NULL;
  }
  ::memcpy(&netaddr_, &from.netaddr_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&netaddr_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:protobuf_bird_bench.rte)
}

void rte::SharedCtor() {
  _cached_size_ = 0;
  ifname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uplink_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&uplink_) + sizeof(type_));
}

rte::~rte() {
  // @@protoc_insertion_point(destructor:protobuf_bird_bench.rte)
  SharedDtor();
}

void rte::SharedDtor() {
  ifname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete uplink_;
  }
}

void rte::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rte::descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rte& rte::default_instance() {
  protobuf_rt_2eproto::InitDefaults();
  return *internal_default_instance();
}

rte* rte::New(::google::protobuf::Arena* arena) const {
  rte* n = new rte;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rte::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_bird_bench.rte)
  attrs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ifname()) {
      GOOGLE_DCHECK(!ifname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ifname_.UnsafeRawStringPointer())->clear();
    }
    if (has_uplink()) {
      GOOGLE_DCHECK(uplink_ != NULL);
      uplink_->::protobuf_bird_bench::time::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&netaddr_, 0, reinterpret_cast<char*>(&uplink_from_) -
      reinterpret_cast<char*>(&netaddr_) + sizeof(uplink_from_));
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rte::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_bird_bench.rte)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 netaddr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_netaddr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netaddr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 gwaddr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gwaddr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gwaddr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 as_no = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_as_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &as_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protobuf_bird_bench.rte_src src = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_bird_bench::rte_src_IsValid(value)) {
            set_src(static_cast< ::protobuf_bird_bench::rte_src >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protobuf_bird_bench.rta attrs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ifname = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ifname().data(), this->ifname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf_bird_bench.rte.ifname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protobuf_bird_bench.time uplink = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uplink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uplink_from = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_uplink_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uplink_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_bird_bench.rte)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_bird_bench.rte)
  return false;
#undef DO_
}

void rte::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_bird_bench.rte)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 netaddr = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->netaddr(), output);
  }

  // required uint32 prefix = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prefix(), output);
  }

  // required uint32 gwaddr = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gwaddr(), output);
  }

  // optional uint64 as_no = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->as_no(), output);
  }

  // optional .protobuf_bird_bench.rte_src src = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->src(), output);
  }

  // repeated .protobuf_bird_bench.rta attrs = 6;
  for (unsigned int i = 0, n = this->attrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attrs(i), output);
  }

  // optional string ifname = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ifname().data(), this->ifname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf_bird_bench.rte.ifname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ifname(), output);
  }

  // required .protobuf_bird_bench.time uplink = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->uplink_, output);
  }

  // optional uint32 uplink_from = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uplink_from(), output);
  }

  // required uint32 type = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_bird_bench.rte)
}

::google::protobuf::uint8* rte::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_bird_bench.rte)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 netaddr = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->netaddr(), target);
  }

  // required uint32 prefix = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prefix(), target);
  }

  // required uint32 gwaddr = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gwaddr(), target);
  }

  // optional uint64 as_no = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->as_no(), target);
  }

  // optional .protobuf_bird_bench.rte_src src = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->src(), target);
  }

  // repeated .protobuf_bird_bench.rta attrs = 6;
  for (unsigned int i = 0, n = this->attrs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->attrs(i), deterministic, target);
  }

  // optional string ifname = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ifname().data(), this->ifname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf_bird_bench.rte.ifname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ifname(), target);
  }

  // required .protobuf_bird_bench.time uplink = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->uplink_, deterministic, target);
  }

  // optional uint32 uplink_from = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uplink_from(), target);
  }

  // required uint32 type = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_bird_bench.rte)
  return target;
}

size_t rte::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_bird_bench.rte)
  size_t total_size = 0;

  if (has_uplink()) {
    // required .protobuf_bird_bench.time uplink = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uplink_);
  }

  if (has_netaddr()) {
    // required uint32 netaddr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->netaddr());
  }

  if (has_prefix()) {
    // required uint32 prefix = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefix());
  }

  if (has_gwaddr()) {
    // required uint32 gwaddr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gwaddr());
  }

  if (has_type()) {
    // required uint32 type = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t rte::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_bird_bench.rte)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000012e) ^ 0x0000012e) == 0) {  // All required fields are present.
    // required .protobuf_bird_bench.time uplink = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uplink_);

    // required uint32 netaddr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->netaddr());

    // required uint32 prefix = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefix());

    // required uint32 gwaddr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gwaddr());

    // required uint32 type = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protobuf_bird_bench.rta attrs = 6;
  {
    unsigned int count = this->attrs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attrs(i));
    }
  }

  // optional string ifname = 7;
  if (has_ifname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ifname());
  }

  // optional uint64 as_no = 4;
  if (has_as_no()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->as_no());
  }

  if (_has_bits_[0 / 32] & 192u) {
    // optional .protobuf_bird_bench.rte_src src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src());
    }

    // optional uint32 uplink_from = 9;
    if (has_uplink_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uplink_from());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rte::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_bird_bench.rte)
  GOOGLE_DCHECK_NE(&from, this);
  const rte* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rte>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_bird_bench.rte)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_bird_bench.rte)
    MergeFrom(*source);
  }
}

void rte::MergeFrom(const rte& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_bird_bench.rte)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrs_.MergeFrom(from.attrs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ifname();
      ifname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ifname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_uplink()->::protobuf_bird_bench::time::MergeFrom(from.uplink());
    }
    if (cached_has_bits & 0x00000004u) {
      netaddr_ = from.netaddr_;
    }
    if (cached_has_bits & 0x00000008u) {
      prefix_ = from.prefix_;
    }
    if (cached_has_bits & 0x00000010u) {
      as_no_ = from.as_no_;
    }
    if (cached_has_bits & 0x00000020u) {
      gwaddr_ = from.gwaddr_;
    }
    if (cached_has_bits & 0x00000040u) {
      src_ = from.src_;
    }
    if (cached_has_bits & 0x00000080u) {
      uplink_from_ = from.uplink_from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_type(from.type());
  }
}

void rte::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_bird_bench.rte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rte::CopyFrom(const rte& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_bird_bench.rte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rte::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000012e) != 0x0000012e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  if (has_uplink()) {
    if (!this->uplink_->IsInitialized()) return false;
  }
  return true;
}

void rte::Swap(rte* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rte::InternalSwap(rte* other) {
  attrs_.InternalSwap(&other->attrs_);
  ifname_.Swap(&other->ifname_);
  std::swap(uplink_, other->uplink_);
  std::swap(netaddr_, other->netaddr_);
  std::swap(prefix_, other->prefix_);
  std::swap(as_no_, other->as_no_);
  std::swap(gwaddr_, other->gwaddr_);
  std::swap(src_, other->src_);
  std::swap(uplink_from_, other->uplink_from_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rte::GetMetadata() const {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rte

// required uint32 netaddr = 1;
bool rte::has_netaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void rte::set_has_netaddr() {
  _has_bits_[0] |= 0x00000004u;
}
void rte::clear_has_netaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
void rte::clear_netaddr() {
  netaddr_ = 0u;
  clear_has_netaddr();
}
::google::protobuf::uint32 rte::netaddr() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.netaddr)
  return netaddr_;
}
void rte::set_netaddr(::google::protobuf::uint32 value) {
  set_has_netaddr();
  netaddr_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.netaddr)
}

// required uint32 prefix = 2;
bool rte::has_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void rte::set_has_prefix() {
  _has_bits_[0] |= 0x00000008u;
}
void rte::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000008u;
}
void rte::clear_prefix() {
  prefix_ = 0u;
  clear_has_prefix();
}
::google::protobuf::uint32 rte::prefix() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.prefix)
  return prefix_;
}
void rte::set_prefix(::google::protobuf::uint32 value) {
  set_has_prefix();
  prefix_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.prefix)
}

// required uint32 gwaddr = 3;
bool rte::has_gwaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void rte::set_has_gwaddr() {
  _has_bits_[0] |= 0x00000020u;
}
void rte::clear_has_gwaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
void rte::clear_gwaddr() {
  gwaddr_ = 0u;
  clear_has_gwaddr();
}
::google::protobuf::uint32 rte::gwaddr() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.gwaddr)
  return gwaddr_;
}
void rte::set_gwaddr(::google::protobuf::uint32 value) {
  set_has_gwaddr();
  gwaddr_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.gwaddr)
}

// optional uint64 as_no = 4;
bool rte::has_as_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void rte::set_has_as_no() {
  _has_bits_[0] |= 0x00000010u;
}
void rte::clear_has_as_no() {
  _has_bits_[0] &= ~0x00000010u;
}
void rte::clear_as_no() {
  as_no_ = GOOGLE_ULONGLONG(0);
  clear_has_as_no();
}
::google::protobuf::uint64 rte::as_no() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.as_no)
  return as_no_;
}
void rte::set_as_no(::google::protobuf::uint64 value) {
  set_has_as_no();
  as_no_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.as_no)
}

// optional string ifname = 7;
bool rte::has_ifname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void rte::set_has_ifname() {
  _has_bits_[0] |= 0x00000001u;
}
void rte::clear_has_ifname() {
  _has_bits_[0] &= ~0x00000001u;
}
void rte::clear_ifname() {
  ifname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ifname();
}
const ::std::string& rte::ifname() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.ifname)
  return ifname_.GetNoArena();
}
void rte::set_ifname(const ::std::string& value) {
  set_has_ifname();
  ifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.ifname)
}
#if LANG_CXX11
void rte::set_ifname(::std::string&& value) {
  set_has_ifname();
  ifname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_bird_bench.rte.ifname)
}
#endif
void rte::set_ifname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ifname();
  ifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_bird_bench.rte.ifname)
}
void rte::set_ifname(const char* value, size_t size) {
  set_has_ifname();
  ifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_bird_bench.rte.ifname)
}
::std::string* rte::mutable_ifname() {
  set_has_ifname();
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rte.ifname)
  return ifname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rte::release_ifname() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rte.ifname)
  clear_has_ifname();
  return ifname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rte::set_allocated_ifname(::std::string* ifname) {
  if (ifname != NULL) {
    set_has_ifname();
  } else {
    clear_has_ifname();
  }
  ifname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ifname);
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rte.ifname)
}

// required .protobuf_bird_bench.time uplink = 8;
bool rte::has_uplink() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void rte::set_has_uplink() {
  _has_bits_[0] |= 0x00000002u;
}
void rte::clear_has_uplink() {
  _has_bits_[0] &= ~0x00000002u;
}
void rte::clear_uplink() {
  if (uplink_ != NULL) uplink_->::protobuf_bird_bench::time::Clear();
  clear_has_uplink();
}
const ::protobuf_bird_bench::time& rte::uplink() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.uplink)
  return uplink_ != NULL ? *uplink_
                         : *::protobuf_bird_bench::time::internal_default_instance();
}
::protobuf_bird_bench::time* rte::mutable_uplink() {
  set_has_uplink();
  if (uplink_ == NULL) {
    uplink_ = new ::protobuf_bird_bench::time;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rte.uplink)
  return uplink_;
}
::protobuf_bird_bench::time* rte::release_uplink() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rte.uplink)
  clear_has_uplink();
  ::protobuf_bird_bench::time* temp = uplink_;
  uplink_ = NULL;
  return temp;
}
void rte::set_allocated_uplink(::protobuf_bird_bench::time* uplink) {
  delete uplink_;
  uplink_ = uplink;
  if (uplink) {
    set_has_uplink();
  } else {
    clear_has_uplink();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rte.uplink)
}

// optional uint32 uplink_from = 9;
bool rte::has_uplink_from() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void rte::set_has_uplink_from() {
  _has_bits_[0] |= 0x00000080u;
}
void rte::clear_has_uplink_from() {
  _has_bits_[0] &= ~0x00000080u;
}
void rte::clear_uplink_from() {
  uplink_from_ = 0u;
  clear_has_uplink_from();
}
::google::protobuf::uint32 rte::uplink_from() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.uplink_from)
  return uplink_from_;
}
void rte::set_uplink_from(::google::protobuf::uint32 value) {
  set_has_uplink_from();
  uplink_from_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.uplink_from)
}

// required uint32 type = 10;
bool rte::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void rte::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void rte::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void rte::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 rte::type() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.type)
  return type_;
}
void rte::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.type)
}

// optional .protobuf_bird_bench.rte_src src = 5;
bool rte::has_src() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void rte::set_has_src() {
  _has_bits_[0] |= 0x00000040u;
}
void rte::clear_has_src() {
  _has_bits_[0] &= ~0x00000040u;
}
void rte::clear_src() {
  src_ = 0;
  clear_has_src();
}
::protobuf_bird_bench::rte_src rte::src() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.src)
  return static_cast< ::protobuf_bird_bench::rte_src >(src_);
}
void rte::set_src(::protobuf_bird_bench::rte_src value) {
  assert(::protobuf_bird_bench::rte_src_IsValid(value));
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rte.src)
}

// repeated .protobuf_bird_bench.rta attrs = 6;
int rte::attrs_size() const {
  return attrs_.size();
}
void rte::clear_attrs() {
  attrs_.Clear();
}
const ::protobuf_bird_bench::rta& rte::attrs(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rte.attrs)
  return attrs_.Get(index);
}
::protobuf_bird_bench::rta* rte::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rte.attrs)
  return attrs_.Mutable(index);
}
::protobuf_bird_bench::rta* rte::add_attrs() {
  // @@protoc_insertion_point(field_add:protobuf_bird_bench.rte.attrs)
  return attrs_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rta >*
rte::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_bird_bench.rte.attrs)
  return &attrs_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rta >&
rte::attrs() const {
  // @@protoc_insertion_point(field_list:protobuf_bird_bench.rte.attrs)
  return attrs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rt::kVersionFieldNumber;
const int rt::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rt::rt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_bird_bench.rt)
}
rt::rt(const rt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_bird_bench.rt)
}

void rt::SharedCtor() {
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

rt::~rt() {
  // @@protoc_insertion_point(destructor:protobuf_bird_bench.rt)
  SharedDtor();
}

void rt::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rt::descriptor() {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rt& rt::default_instance() {
  protobuf_rt_2eproto::InitDefaults();
  return *internal_default_instance();
}

rt* rt::New(::google::protobuf::Arena* arena) const {
  rt* n = new rt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rt::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_bird_bench.rt)
  entries_.Clear();
  if (has_version()) {
    GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*version_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_bird_bench.rt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf_bird_bench.rt.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protobuf_bird_bench.rte entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_bird_bench.rt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_bird_bench.rt)
  return false;
#undef DO_
}

void rt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_bird_bench.rt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf_bird_bench.rt.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // repeated .protobuf_bird_bench.rte entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_bird_bench.rt)
}

::google::protobuf::uint8* rt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_bird_bench.rt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf_bird_bench.rt.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // repeated .protobuf_bird_bench.rte entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->entries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_bird_bench.rt)
  return target;
}

size_t rt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_bird_bench.rt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }
  // repeated .protobuf_bird_bench.rte entries = 2;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_bird_bench.rt)
  GOOGLE_DCHECK_NE(&from, this);
  const rt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_bird_bench.rt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_bird_bench.rt)
    MergeFrom(*source);
  }
}

void rt::MergeFrom(const rt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_bird_bench.rt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_version()) {
    set_has_version();
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void rt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_bird_bench.rt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rt::CopyFrom(const rt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_bird_bench.rt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void rt::Swap(rt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rt::InternalSwap(rt* other) {
  entries_.InternalSwap(&other->entries_);
  version_.Swap(&other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rt::GetMetadata() const {
  protobuf_rt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rt

// required string version = 1;
bool rt::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void rt::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void rt::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void rt::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& rt::version() const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rt.version)
  return version_.GetNoArena();
}
void rt::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_bird_bench.rt.version)
}
#if LANG_CXX11
void rt::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_bird_bench.rt.version)
}
#endif
void rt::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_bird_bench.rt.version)
}
void rt::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_bird_bench.rt.version)
}
::std::string* rt::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rt.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rt::release_version() {
  // @@protoc_insertion_point(field_release:protobuf_bird_bench.rt.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rt::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:protobuf_bird_bench.rt.version)
}

// repeated .protobuf_bird_bench.rte entries = 2;
int rt::entries_size() const {
  return entries_.size();
}
void rt::clear_entries() {
  entries_.Clear();
}
const ::protobuf_bird_bench::rte& rt::entries(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_bird_bench.rt.entries)
  return entries_.Get(index);
}
::protobuf_bird_bench::rte* rt::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_bird_bench.rt.entries)
  return entries_.Mutable(index);
}
::protobuf_bird_bench::rte* rt::add_entries() {
  // @@protoc_insertion_point(field_add:protobuf_bird_bench.rt.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rte >*
rt::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_bird_bench.rt.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf_bird_bench::rte >&
rt::entries() const {
  // @@protoc_insertion_point(field_list:protobuf_bird_bench.rt.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_bird_bench

// @@protoc_insertion_point(global_scope)
