Supported data types:

	- bool
	- int
	- uint
	- float
	- string
	- array (heterogenous)
	- stream
	- dict


Concept of Names:

	- "name" is used to convey meaning of a piece of data
	- URL-like
	- names will be written in relative URL form to conserve resources
	- hierarchy of names reflects authority over namespaces
	- decentralized, independent and collision-free scheme
	- Names are spelled and given an integer ID to avoid transferring the
	  same string more than once


Concept of Dicts:

	- let's be very flexible, let the types be loose
	- provide nice API to setup dict <-> struct mapping easily


The Big Picture:

	- data is prefixed by a Name to give it a meaning
	- then type of data follows (name does not imply type)
	- then the data itself follows
	- structs may be represented as dicts


Notes on serialization of individual types:

	- string:

		- UTF-8 encoded
		- null terminated
		- (likely) prefixed by string length in bytes to simplify reader's
		  memory management


Events:

	- document contains following "events" (tags):

		- name
		- data
		- map-begin
		- map-end


Open questions:

	- should arrays be homogenous?
	- can we benefit from fixed fields in terms of speed?
	- how do we tranfer *actual* hashtables?


API:
	
	- strict mapping from Names to struct members (or variables etc.):
		- only interested in some Names, ignore other
		- give a bitmap denoting which struct members are valid

	- like above, but accumulate "extra" names somewhere
		- in an "extra stuff" dictionary

	- don't do any mapping, just give generic structures holding all the
	  values
	  	- everything's in a "extra stuff" generic dict


name		name-id	len		name	...		\0
data		name-id	type	len	 	value
map-bgein	name-id	type	len	 	value	...	name-id type value map-end
map-end

name 27 "bird.org/struct/thing" 1
name 28 "bird.org/struct/thingy" 2

data 1 int len 11
data 1 int len 12


Alternative Idea:
	- use CBOR to encode all data, define a protocol over CBOR instead
	- use native CBOR extensions (tags) to attach semantic information to
	  data
	- documents should be properly CBOR-formatted and decodable without
	  errors
